// base build v1.3
// https://bitbucket.org/symphonydevelopers/codebase-main/src/master/tools/gradle/build.gradle

// Limitations of the plugins DSL
// https://docs.gradle.org/5.2.1/userguide/plugins.html#plugins_dsl_limitations

plugins {
  id 'java'
  id 'jacoco'
  id 'groovy'

  id 'eclipse'
  id 'idea'

  id 'org.springframework.boot' version '2.4.10'
  id 'com.coral.tools' version '2.0-SNAPSHOT'
}

apply plugin: "io.spring.dependency-management"

group = 'com.ladbrokescoral'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def nexusRepo = System.getenv("NEXUS_HOST") ?: 'https://nexus-vie.coral.co.uk/repository/maven-public/'
def nexusUser = System.getenv("NEXUS_USER") ?: project.properties.nexusUser
def nexusPass = System.getenv("NEXUS_PASS") ?: project.properties.nexusPass

repositories {
  maven {
    credentials {
      username = nexusUser
      password = nexusPass
    }
    url nexusRepo
  }
  jcenter()
}

configurations {
  all {
    // exclude module: 'joda-time'
  }
  compileOnly {
    extendsFrom annotationProcessor
  }
}


ext {
  set('springCloudVersion', '2020.0.0-M5')
  set('spockBomVersion', '2.0-groovy-2.5')
}

dependencies {

  // Development
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

  // Fortify Annotations manual https://drive.google.com/open?id=15SbZt-C937-CnBNs6-zIH-Wy8T_KAFNZ
  compileOnly 'com.hp.fortify:fortifyAnnotations:4.30'

  // Spring
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
  implementation 'io.netty:netty-transport-native-epoll'
  //implementation 'io.micrometer:micrometer-core'


  // Spring Cloud
  implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
  // implementation 'org.springframework.cloud:spring-cloud-starter-config'

  // // Springdoc - OpenAPI
  // implementation "org.springdoc:springdoc-openapi-webflux-ui:1.4.8" // use if needed

  // Project dependencies
  implementation 'com.newrelic.agent.java:newrelic-api:latest.release'

  // Testing
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  //testImplementation 'org.junit.vintage:junit-vintage-engine' // FIXME: remove after JUnit 5 migration

  // testImplementation 'org.springframework.security:spring-security-test'
  testImplementation platform("org.spockframework:spock-bom:$spockBomVersion")
  testImplementation 'org.spockframework:spock-core'
  testImplementation 'org.spockframework:spock-spring'

  testImplementation 'io.projectreactor:reactor-test'
  // io.projectreactor	reactor-test	3.4.1

  // FIXME: mock redis
  testImplementation('it.ozimov:embedded-redis:0.7.3') {
    exclude module: 'slf4j-simple'
  }
}

jacocoTestReport.reports.xml.enabled = true

test {
  systemProperty 'spring.profiles.active', 'UNIT'
  useJUnitPlatform()
}

springBoot {
  buildInfo()
}

bootBuildImage {
  imageName = "${rootProject.name}"
}
