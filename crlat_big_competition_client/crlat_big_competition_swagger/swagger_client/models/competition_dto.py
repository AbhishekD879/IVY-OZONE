# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CompetitionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'int',
        'clazz_id': 'int',
        'competition_participants': 'dict(str, ParticipantWithSvgDto)',
        'competition_tabs': 'list[CompetitionTabDto]',
        'id': 'str',
        'name': 'str',
        'path': 'str',
        'type_id': 'int',
        'uri': 'str'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'clazz_id': 'clazzId',
        'competition_participants': 'competitionParticipants',
        'competition_tabs': 'competitionTabs',
        'id': 'id',
        'name': 'name',
        'path': 'path',
        'type_id': 'typeId',
        'uri': 'uri'
    }

    def __init__(self, category_id=None, clazz_id=None, competition_participants=None, competition_tabs=None, id=None, name=None, path=None, type_id=None, uri=None):  # noqa: E501
        """CompetitionDto - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._clazz_id = None
        self._competition_participants = None
        self._competition_tabs = None
        self._id = None
        self._name = None
        self._path = None
        self._type_id = None
        self._uri = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if clazz_id is not None:
            self.clazz_id = clazz_id
        if competition_participants is not None:
            self.competition_participants = competition_participants
        if competition_tabs is not None:
            self.competition_tabs = competition_tabs
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if type_id is not None:
            self.type_id = type_id
        if uri is not None:
            self.uri = uri

    @property
    def category_id(self):
        """Gets the category_id of this CompetitionDto.  # noqa: E501


        :return: The category_id of this CompetitionDto.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CompetitionDto.


        :param category_id: The category_id of this CompetitionDto.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def clazz_id(self):
        """Gets the clazz_id of this CompetitionDto.  # noqa: E501


        :return: The clazz_id of this CompetitionDto.  # noqa: E501
        :rtype: int
        """
        return self._clazz_id

    @clazz_id.setter
    def clazz_id(self, clazz_id):
        """Sets the clazz_id of this CompetitionDto.


        :param clazz_id: The clazz_id of this CompetitionDto.  # noqa: E501
        :type: int
        """

        self._clazz_id = clazz_id

    @property
    def competition_participants(self):
        """Gets the competition_participants of this CompetitionDto.  # noqa: E501


        :return: The competition_participants of this CompetitionDto.  # noqa: E501
        :rtype: dict(str, ParticipantWithSvgDto)
        """
        return self._competition_participants

    @competition_participants.setter
    def competition_participants(self, competition_participants):
        """Sets the competition_participants of this CompetitionDto.


        :param competition_participants: The competition_participants of this CompetitionDto.  # noqa: E501
        :type: dict(str, ParticipantWithSvgDto)
        """

        self._competition_participants = competition_participants

    @property
    def competition_tabs(self):
        """Gets the competition_tabs of this CompetitionDto.  # noqa: E501


        :return: The competition_tabs of this CompetitionDto.  # noqa: E501
        :rtype: list[CompetitionTabDto]
        """
        return self._competition_tabs

    @competition_tabs.setter
    def competition_tabs(self, competition_tabs):
        """Sets the competition_tabs of this CompetitionDto.


        :param competition_tabs: The competition_tabs of this CompetitionDto.  # noqa: E501
        :type: list[CompetitionTabDto]
        """

        self._competition_tabs = competition_tabs

    @property
    def id(self):
        """Gets the id of this CompetitionDto.  # noqa: E501


        :return: The id of this CompetitionDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompetitionDto.


        :param id: The id of this CompetitionDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CompetitionDto.  # noqa: E501


        :return: The name of this CompetitionDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompetitionDto.


        :param name: The name of this CompetitionDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this CompetitionDto.  # noqa: E501


        :return: The path of this CompetitionDto.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CompetitionDto.


        :param path: The path of this CompetitionDto.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def type_id(self):
        """Gets the type_id of this CompetitionDto.  # noqa: E501


        :return: The type_id of this CompetitionDto.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this CompetitionDto.


        :param type_id: The type_id of this CompetitionDto.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def uri(self):
        """Gets the uri of this CompetitionDto.  # noqa: E501


        :return: The uri of this CompetitionDto.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CompetitionDto.


        :param uri: The uri of this CompetitionDto.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompetitionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompetitionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
