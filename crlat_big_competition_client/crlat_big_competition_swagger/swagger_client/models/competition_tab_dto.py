# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CompetitionTabDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'competition_modules': 'list[CompetitionModuleDto]',
        'competition_sub_tabs': 'list[CompetitionSubTabDto]',
        'has_subtabs': 'bool',
        'id': 'str',
        'path': 'str',
        'title': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'competition_modules': 'competitionModules',
        'competition_sub_tabs': 'competitionSubTabs',
        'has_subtabs': 'hasSubtabs',
        'id': 'id',
        'path': 'path',
        'title': 'title',
        'uri': 'uri'
    }

    def __init__(self, competition_modules=None, competition_sub_tabs=None, has_subtabs=None, id=None, path=None, title=None, uri=None):  # noqa: E501
        """CompetitionTabDto - a model defined in Swagger"""  # noqa: E501
        self._competition_modules = None
        self._competition_sub_tabs = None
        self._has_subtabs = None
        self._id = None
        self._path = None
        self._title = None
        self._uri = None
        self.discriminator = None
        if competition_modules is not None:
            self.competition_modules = competition_modules
        if competition_sub_tabs is not None:
            self.competition_sub_tabs = competition_sub_tabs
        if has_subtabs is not None:
            self.has_subtabs = has_subtabs
        if id is not None:
            self.id = id
        if path is not None:
            self.path = path
        if title is not None:
            self.title = title
        if uri is not None:
            self.uri = uri

    @property
    def competition_modules(self):
        """Gets the competition_modules of this CompetitionTabDto.  # noqa: E501


        :return: The competition_modules of this CompetitionTabDto.  # noqa: E501
        :rtype: list[CompetitionModuleDto]
        """
        return self._competition_modules

    @competition_modules.setter
    def competition_modules(self, competition_modules):
        """Sets the competition_modules of this CompetitionTabDto.


        :param competition_modules: The competition_modules of this CompetitionTabDto.  # noqa: E501
        :type: list[CompetitionModuleDto]
        """

        self._competition_modules = competition_modules

    @property
    def competition_sub_tabs(self):
        """Gets the competition_sub_tabs of this CompetitionTabDto.  # noqa: E501


        :return: The competition_sub_tabs of this CompetitionTabDto.  # noqa: E501
        :rtype: list[CompetitionSubTabDto]
        """
        return self._competition_sub_tabs

    @competition_sub_tabs.setter
    def competition_sub_tabs(self, competition_sub_tabs):
        """Sets the competition_sub_tabs of this CompetitionTabDto.


        :param competition_sub_tabs: The competition_sub_tabs of this CompetitionTabDto.  # noqa: E501
        :type: list[CompetitionSubTabDto]
        """

        self._competition_sub_tabs = competition_sub_tabs

    @property
    def has_subtabs(self):
        """Gets the has_subtabs of this CompetitionTabDto.  # noqa: E501


        :return: The has_subtabs of this CompetitionTabDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_subtabs

    @has_subtabs.setter
    def has_subtabs(self, has_subtabs):
        """Sets the has_subtabs of this CompetitionTabDto.


        :param has_subtabs: The has_subtabs of this CompetitionTabDto.  # noqa: E501
        :type: bool
        """

        self._has_subtabs = has_subtabs

    @property
    def id(self):
        """Gets the id of this CompetitionTabDto.  # noqa: E501


        :return: The id of this CompetitionTabDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompetitionTabDto.


        :param id: The id of this CompetitionTabDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def path(self):
        """Gets the path of this CompetitionTabDto.  # noqa: E501


        :return: The path of this CompetitionTabDto.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CompetitionTabDto.


        :param path: The path of this CompetitionTabDto.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def title(self):
        """Gets the title of this CompetitionTabDto.  # noqa: E501


        :return: The title of this CompetitionTabDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CompetitionTabDto.


        :param title: The title of this CompetitionTabDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this CompetitionTabDto.  # noqa: E501


        :return: The uri of this CompetitionTabDto.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CompetitionTabDto.


        :param uri: The uri of this CompetitionTabDto.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompetitionTabDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompetitionTabDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
