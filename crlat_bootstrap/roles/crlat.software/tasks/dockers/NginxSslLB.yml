# get certs
## create tmp dir
- name: Create temporary directory for certificates
  local_action:
    module: tempfile
    state: directory
    prefix: cert_dir
  register: cert_tmp_dir

## download root ca pem
## download domain certs
- name: "Download certificate files from s3"
  local_action:
    module: aws_s3
    bucket: "{{ default_s3_bucket }}"
    object: "{{ s3_certs_path }}/{{ cert_file }}"
    dest: "{{ cert_tmp_dir.path }}/{{ cert_file }}"
    mode: get
  with_items:
    - "{{ web_root_cert_filename }}.pem"
    - "{{ private_domain }}.crt"
    - "{{ private_domain }}.key"
  loop_control:
    loop_var: cert_file

- name: Create NGINX config folders on remote
  file:
    path: "{{ conf_path_item }}"
    state: directory
  with_items:
    - /etc/nginx
    - /etc/nginx/ssl
    - /etc/nginx/conf.d
  loop_control:
    loop_var: conf_path_item

- name: "Upload certs"
  copy:
    src: "{{ cert_tmp_dir.path }}/{{ local_cert_file }}"
    dest: "/etc/nginx/ssl/{{ local_cert_file }}"
  with_items:
    - "{{ web_root_cert_filename }}.pem"
    - "{{ private_domain }}.crt"
    - "{{ private_domain }}.key"
  loop_control:
    loop_var: local_cert_file

# find upstream
- name: Find upstream nodes
  local_action:
    module: ec2_instance_facts
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:ClusterNodeType": "{{ ec2_tag_NginxUpstream }}"
  register: upstream_nodes

# build configs
- name: "Build NGINX HTTPS Load Balancer config for {{ ec2_tag_NginxUpstream }}"
  template:
    src: nginx_config.j2
    dest: /etc/nginx/conf.d/mock_upstream.conf

# start docker
- name: Create NGINX Container
  docker_container:
    name: NginxSslLB
    image: nginx:alpine
    state: started
    restart: yes
    restart_policy: always
    dns_servers:
      - "{{ dns_server_ip }}"
    ports:
     - "80:80"
     - "443:443"
    volumes:
      - /etc/nginx/conf.d:/etc/nginx/conf.d
      - /etc/nginx/ssl:/etc/nginx/ssl
      - /var/www:/var/www

# delete temp dir
- name: "Delete tmp folder {{ cert_tmp_dir.path }}"
  file:
    path: "{{ cert_tmp_dir.path }}"
    state: absent