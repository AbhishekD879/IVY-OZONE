#docker run -d --name=crlat_pypi -e PYPI_PASSWD_FILE=/srv/pypi/.htaccess -v /mnt/crlat-pypi-repo/packages:/srv/pypi:rw -v $(pwd)/.htaccess:/srv/pypi/.htaccess -p 80:80 codekoala/pypi
- name: "Create PyPi repository directories on S3"
  file:
    path: "{{ dnsmasq_dir }}"
    state: directory
  with_items:
    - "/mnt/{{ s3mountpoints.0 }}/crlat-pypi-repo"
  loop_control:
    loop_var: dnsmasq_dir

- name: Set PyPi docker name
  set_fact:
    upstream_server_name: crlatPyPi

- name: Set nginx servers upstream vars
  set_fact:
    upstream_nodes: ["{{ upstream_server_name }}"]

- name: Remove any existing docker crlatPyPi
  docker_container:
    name: crlatPyPi
    state: absent

- name: Create crlatPyPi Container
  docker_container:
    name: crlatPyPi
    image: codekoala/pypi
    state: started
    restart: yes
    restart_policy: always
    env:
      PYPI_PASSWD_FILE: /srv/pypi/.htaccess
    dns_servers:
      - "{{ dns_server_ip }}"
    volumes:
      - /mnt/{{ s3mountpoints.0 }}/crlat-pypi-repo:/srv/pypi:rw

# get certs
## create tmp dir
- name: Create temporary directory for certificates
  local_action:
    module: tempfile
    state: directory
    prefix: cert_dir
  register: cert_tmp_dir

## download root ca pem
## download domain certs
- name: "Download certificate files from s3"
  local_action:
    module: aws_s3
    bucket: "{{ default_s3_bucket }}"
    object: "{{ s3_certs_path }}/{{ cert_file }}"
    dest: "{{ cert_tmp_dir.path }}/{{ cert_file }}"
    mode: get
  with_items:
    - "{{ web_root_cert_filename }}.pem"
    - "{{ private_domain }}.crt"
    - "{{ private_domain }}.key"
  loop_control:
    loop_var: cert_file

- name: Create NGINX config folders on remote
  file:
    path: "{{ conf_path_item }}"
    state: directory
  with_items:
    - /etc/nginx
    - /etc/nginx/ssl
    - /etc/nginx/conf.d
  loop_control:
    loop_var: conf_path_item

- name: "Upload certs"
  copy:
    src: "{{ cert_tmp_dir.path }}/{{ local_cert_file }}"
    dest: "/etc/nginx/ssl/{{ local_cert_file }}"
  with_items:
    - "{{ web_root_cert_filename }}.pem"
    - "{{ private_domain }}.crt"
    - "{{ private_domain }}.key"
  loop_control:
    loop_var: local_cert_file

# build configs
- name: "Build NGINX HTTPS Load Balancer config"
  template:
    src: nginx_ssl_proxy.j2
    dest: /etc/nginx/conf.d/proxy_upstream.conf

- name: Remove any existing docker NginxSslLB
  docker_container:
    name: NginxSslLB
    state: absent

# start docker
- name: Create NGINX Container
  docker_container:
    name: NginxSslLB
    image: nginx:alpine
    state: started
    restart: yes
    restart_policy: always
    links:
      - "{{ upstream_server_name }}"
    dns_servers:
      - "{{ dns_server_ip }}"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/nginx/conf.d:/etc/nginx/conf.d
      - /etc/nginx/ssl:/etc/nginx/ssl
      - /var/www:/var/www

# delete temp dir
- name: "Delete tmp folder {{ cert_tmp_dir.path }}"
  file:
    path: "{{ cert_tmp_dir.path }}"
    state: absent