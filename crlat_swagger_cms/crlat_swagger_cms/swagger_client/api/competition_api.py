# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from crlat_swagger_cms.swagger_client.api_client import ApiClient


class CompetitionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def competition_by_id(self, id, **kwargs):  # noqa: E501
        """CompetitionById  # noqa: E501

        Delete a Competition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competition_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of resource (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.competition_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.competition_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def competition_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """CompetitionById  # noqa: E501

        Delete a Competition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competition_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of resource (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method competition_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `competition_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_all_brand_competition(self, brand, **kwargs):  # noqa: E501
        """findAllByBrand  # noqa: E501

        Retrieve all Competitions for brand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all_brand_competition(brand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :return: list[Competition2]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_all_brand_competition_with_http_info(brand, **kwargs)  # noqa: E501
        else:
            (data) = self.find_all_brand_competition_with_http_info(brand, **kwargs)  # noqa: E501
            return data

    def find_all_brand_competition_with_http_info(self, brand, **kwargs):  # noqa: E501
        """findAllByBrand  # noqa: E501

        Retrieve all Competitions for brand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all_brand_competition_with_http_info(brand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :return: list[Competition2]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_all_brand_competition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_all_brand_competition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/brand/{brand}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Competition2]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_all_competition(self, **kwargs):  # noqa: E501
        """findAll  # noqa: E501

        Retrieve all Competitions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all_competition(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Competition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_all_competition_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_all_competition_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_all_competition_with_http_info(self, **kwargs):  # noqa: E501
        """findAll  # noqa: E501

        Retrieve all Competitions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all_competition_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Competition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_all_competition" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Competition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_one_competition(self, id, **kwargs):  # noqa: E501
        """findOne  # noqa: E501

        Searches Competition by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_one_competition(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of resource (required)
        :return: Competition2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_one_competition_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_one_competition_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def find_one_competition_with_http_info(self, id, **kwargs):  # noqa: E501
        """findOne  # noqa: E501

        Searches Competition by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_one_competition_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of resource (required)
        :return: Competition2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_one_competition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `find_one_competition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Competition2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_site_serve_event_by_id(self, brand, event_ids, **kwargs):  # noqa: E501
        """FindSiteServeEventById  # noqa: E501

        Searches SiteServeEvent by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_event_by_id(brand, event_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str event_ids: comma separated SiteServe event ids (required)
        :param bool only_specials: If true, the endpoint returns only the special events
        :return: SiteServeEventValidationResultDto2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_site_serve_event_by_id_with_http_info(brand, event_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.find_site_serve_event_by_id_with_http_info(brand, event_ids, **kwargs)  # noqa: E501
            return data

    def find_site_serve_event_by_id_with_http_info(self, brand, event_ids, **kwargs):  # noqa: E501
        """FindSiteServeEventById  # noqa: E501

        Searches SiteServeEvent by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_event_by_id_with_http_info(brand, event_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str event_ids: comma separated SiteServe event ids (required)
        :param bool only_specials: If true, the endpoint returns only the special events
        :return: SiteServeEventValidationResultDto2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand', 'event_ids', 'only_specials']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_site_serve_event_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_site_serve_event_by_id`")  # noqa: E501
        # verify the required parameter 'event_ids' is set
        if ('event_ids' not in params or
                params['event_ids'] is None):
            raise ValueError("Missing the required parameter `event_ids` when calling `find_site_serve_event_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501

        query_params = []
        if 'event_ids' in params:
            query_params.append(('eventIds', params['event_ids']))  # noqa: E501
        if 'only_specials' in params:
            query_params.append(('onlySpecials', params['only_specials']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/brand/{brand}/ss/event', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteServeEventValidationResultDto2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_site_serve_event_by_market_id(self, brand, market_id, **kwargs):  # noqa: E501
        """FindSiteServeEventByMarketId  # noqa: E501

        Searches SiteServeEvent by marketId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_event_by_market_id(brand, market_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str market_id: SiteServe market id (required)
        :return: SiteServeEventValidationResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_site_serve_event_by_market_id_with_http_info(brand, market_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_site_serve_event_by_market_id_with_http_info(brand, market_id, **kwargs)  # noqa: E501
            return data

    def find_site_serve_event_by_market_id_with_http_info(self, brand, market_id, **kwargs):  # noqa: E501
        """FindSiteServeEventByMarketId  # noqa: E501

        Searches SiteServeEvent by marketId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_event_by_market_id_with_http_info(brand, market_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str market_id: SiteServe market id (required)
        :return: SiteServeEventValidationResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand', 'market_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_site_serve_event_by_market_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_site_serve_event_by_market_id`")  # noqa: E501
        # verify the required parameter 'market_id' is set
        if ('market_id' not in params or
                params['market_id'] is None):
            raise ValueError("Missing the required parameter `market_id` when calling `find_site_serve_event_by_market_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501
        if 'market_id' in params:
            path_params['marketId'] = params['market_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/brand/{brand}/ss/market/{marketId}/event', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteServeEventValidationResultDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_site_serve_knockout_event_by_id(self, brand, event_id, **kwargs):  # noqa: E501
        """FindSiteServeKnockoutEventById  # noqa: E501

        Searches FindSiteServeKnockoutEventById by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_knockout_event_by_id(brand, event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str event_id: site serve event id (required)
        :return: list[SiteServeKnockoutEventDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_site_serve_knockout_event_by_id_with_http_info(brand, event_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_site_serve_knockout_event_by_id_with_http_info(brand, event_id, **kwargs)  # noqa: E501
            return data

    def find_site_serve_knockout_event_by_id_with_http_info(self, brand, event_id, **kwargs):  # noqa: E501
        """FindSiteServeKnockoutEventById  # noqa: E501

        Searches FindSiteServeKnockoutEventById by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_knockout_event_by_id_with_http_info(brand, event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str event_id: site serve event id (required)
        :return: list[SiteServeKnockoutEventDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand', 'event_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_site_serve_knockout_event_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_site_serve_knockout_event_by_id`")  # noqa: E501
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `find_site_serve_knockout_event_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501

        query_params = []
        if 'event_id' in params:
            query_params.append(('eventId', params['event_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/brand/{brand}/ss/knockout/event', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteServeKnockoutEventDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_site_serve_market_by_id(self, brand, market_id, **kwargs):  # noqa: E501
        """FindSiteServeMarketById  # noqa: E501

        Searches SiteServeMarket by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_market_by_id(brand, market_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str market_id: SiteServe market id (required)
        :return: SiteServeMarketDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_site_serve_market_by_id_with_http_info(brand, market_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_site_serve_market_by_id_with_http_info(brand, market_id, **kwargs)  # noqa: E501
            return data

    def find_site_serve_market_by_id_with_http_info(self, brand, market_id, **kwargs):  # noqa: E501
        """FindSiteServeMarketById  # noqa: E501

        Searches SiteServeMarket by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_market_by_id_with_http_info(brand, market_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str market_id: SiteServe market id (required)
        :return: SiteServeMarketDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand', 'market_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_site_serve_market_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_site_serve_market_by_id`")  # noqa: E501
        # verify the required parameter 'market_id' is set
        if ('market_id' not in params or
                params['market_id'] is None):
            raise ValueError("Missing the required parameter `market_id` when calling `find_site_serve_market_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501
        if 'market_id' in params:
            path_params['marketId'] = params['market_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/brand/{brand}/ss/market/{marketId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteServeMarketDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_site_serve_type_by_id(self, brand, type_ids, **kwargs):  # noqa: E501
        """FindSiteServeTypeById  # noqa: E501

        Searches SiteServeEvents by type id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_type_by_id(brand, type_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str type_ids: comma separated SiteServe type ids (required)
        :param bool only_specials: If true, the endpoint returns only the special events
        :return: SiteServeEventValidationResultDto2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_site_serve_type_by_id_with_http_info(brand, type_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.find_site_serve_type_by_id_with_http_info(brand, type_ids, **kwargs)  # noqa: E501
            return data

    def find_site_serve_type_by_id_with_http_info(self, brand, type_ids, **kwargs):  # noqa: E501
        """FindSiteServeTypeById  # noqa: E501

        Searches SiteServeEvents by type id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_site_serve_type_by_id_with_http_info(brand, type_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str type_ids: comma separated SiteServe type ids (required)
        :param bool only_specials: If true, the endpoint returns only the special events
        :return: SiteServeEventValidationResultDto2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand', 'type_ids', 'only_specials']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_site_serve_type_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_site_serve_type_by_id`")  # noqa: E501
        # verify the required parameter 'type_ids' is set
        if ('type_ids' not in params or
                params['type_ids'] is None):
            raise ValueError("Missing the required parameter `type_ids` when calling `find_site_serve_type_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501

        query_params = []
        if 'type_ids' in params:
            query_params.append(('typeIds', params['type_ids']))  # noqa: E501
        if 'only_specials' in params:
            query_params.append(('onlySpecials', params['only_specials']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/brand/{brand}/ss/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteServeEventValidationResultDto2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_competition(self, body, **kwargs):  # noqa: E501
        """save  # noqa: E501

        Add a new Competition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_competition(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Competition2 body: Competition object that needs to be added to the storage (required)
        :return: Competition2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.save_competition_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.save_competition_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def save_competition_with_http_info(self, body, **kwargs):  # noqa: E501
        """save  # noqa: E501

        Add a new Competition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_competition_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Competition2 body: Competition object that needs to be added to the storage (required)
        :return: Competition2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_competition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_competition`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Competition2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stats_center_groups(self, comp_id, **kwargs):  # noqa: E501
        """StatsCenterGroups  # noqa: E501

        Searches stats center competitions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats_center_groups(comp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str comp_id: id of competition (required)
        :return: StatsCompetitionSeason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.stats_center_groups_with_http_info(comp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stats_center_groups_with_http_info(comp_id, **kwargs)  # noqa: E501
            return data

    def stats_center_groups_with_http_info(self, comp_id, **kwargs):  # noqa: E501
        """StatsCenterGroups  # noqa: E501

        Searches stats center competitions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats_center_groups_with_http_info(comp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str comp_id: id of competition (required)
        :return: StatsCompetitionSeason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stats_center_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comp_id' is set
        if ('comp_id' not in params or
                params['comp_id'] is None):
            raise ValueError("Missing the required parameter `comp_id` when calling `stats_center_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comp_id' in params:
            path_params['compId'] = params['comp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/{compId}/stats/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsCompetitionSeason',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_competition(self, body, id, **kwargs):  # noqa: E501
        """update  # noqa: E501

        Update an existing Competition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_competition(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Competition2 body: Competition object that needs to be updated in the storage (required)
        :param str id: id of resource (required)
        :return: Competition2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.update_competition_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_competition_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_competition_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """update  # noqa: E501

        Update an existing Competition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_competition_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Competition2 body: Competition object that needs to be updated in the storage (required)
        :param str id: id of resource (required)
        :return: Competition2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_competition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_competition`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_competition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/competition/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Competition2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
