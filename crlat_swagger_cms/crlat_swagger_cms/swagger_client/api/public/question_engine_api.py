# coding: utf-8

"""
    Oxygen CMS Public REST API

    This page contains only public GET request available on cms_api_tests. All models & requests have been taken from bma-cms_api_tests project.   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from crlat_swagger_cms.swagger_client.api_client import ApiClient


class PublicQuestionEngineApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def find_all_quizes(self, **kwargs):  # noqa: E501
        """findQuizes  # noqa: E501

        Retrieve all quizzes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all_quizes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_all_quizes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_all_quizes_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_all_quizes_with_http_info(self, **kwargs):  # noqa: E501
        """findQuizes  # noqa: E501

        Retrieve all quizzes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all_quizes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_all_quizes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/question-engine', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_previous_quizzes_page_by_brand_and_source_id(self, brand, source_id, page_number, page_size, **kwargs):  # noqa: E501
        """findPreviousQuizzesPageByBrandAndSourceId  # noqa: E501

        Retrieve previous quizzes page by brand and source id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_previous_quizzes_page_by_brand_and_source_id(brand, source_id, page_number, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str source_id: comma separated sourceId or empty after / (required)
        :param page_number : number of the page (required)
        :param page_size : size of the page (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_previous_quizzes_page_by_brand_and_source_id_with_http_info(brand, source_id, page_number, page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.find_previous_quizzes_page_by_brand_and_source_id_with_http_info(brand, source_id, page_number, page_size, **kwargs)  # noqa: E501
            return data

    def find_previous_quizzes_page_by_brand_and_source_id_with_http_info(self, brand, source_id, page_number, page_size, **kwargs):  # noqa: E501
        """findPreviousQuizzesPageByBrandAndSourceId  # noqa: E501

        Retrieve previous quizzes page by brand and source id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_previous_quizzes_page_by_brand_and_source_id_with_http_info(brand, source_id, page_number, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str source_id: comma separated sourceId or empty after / (required)
        :param  page_size: number of the page (required)
        :param  page_number: size of the page (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand', 'source_id', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_previous_quizzes_page_by_brand_and_source_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_previous_quizzes_page_by_brand_and_source_id`")  # noqa: E501
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `find_previous_quizzes_page_by_brand_and_source_id`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `find_previous_quizzes_page_by_brand_and_source_id`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `find_previous_quizzes_page_by_brand_and_source_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501
        if 'page_number' in params:
            path_params['pageNumber'] = params['page_number']  # noqa: E501
        if 'page_size' in params:
            path_params['pageSize'] = params['page_size']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{brand}/question-engine/previous/source-id/{sourceId}/{pageNumber}/{pageSize}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_question_by_id(self, quiz_id, question_id, brand, **kwargs):  # noqa: E501
        """findQuestionById  # noqa: E501

        Retrieve question by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_question_by_id(quiz_id, question_id, brand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_id: id to find quiz (required)
        :param str question_id: id to find question (required)
        :param str brand: name of brand to return (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_question_by_id_with_http_info(quiz_id, question_id, brand, **kwargs)  # noqa: E501
        else:
            (data) = self.find_question_by_id_with_http_info(quiz_id, question_id, brand, **kwargs)  # noqa: E501
            return data

    def find_question_by_id_with_http_info(self, quiz_id, question_id, brand, **kwargs):  # noqa: E501
        """findQuestionById  # noqa: E501

        Retrieve question by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_question_by_id_with_http_info(quiz_id, question_id, brand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_id: id to find quiz (required)
        :param str question_id: id to find question (required)
        :param str brand: name of brand to return (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quiz_id', 'question_id', 'brand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_question_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quiz_id' is set
        if ('quiz_id' not in params or
                params['quiz_id'] is None):
            raise ValueError("Missing the required parameter `quiz_id` when calling `find_question_by_id`")  # noqa: E501
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params or
                params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `find_question_by_id`")  # noqa: E501
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_question_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quiz_id' in params:
            path_params['quizId'] = params['quiz_id']  # noqa: E501
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']  # noqa: E501
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{brand}/question-engine/question/{quizId}/{questionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_quiz_history_by_brand_and_source_id(self, brand, source_id, **kwargs):  # noqa: E501
        """findQuizHistoryByBrandAndSourceId  # noqa: E501

        Retrieve Quiz history by brand and SourceId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_quiz_history_by_brand_and_source_id(brand, source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str source_id: comma separated sourceId or empty after / (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_quiz_history_by_brand_and_source_id_with_http_info(brand, source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_quiz_history_by_brand_and_source_id_with_http_info(brand, source_id, **kwargs)  # noqa: E501
            return data

    def find_quiz_history_by_brand_and_source_id_with_http_info(self, brand, source_id, **kwargs):  # noqa: E501
        """findQuizHistoryByBrandAndSourceId  # noqa: E501

        Retrieve Quiz history by brand and SourceId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_quiz_history_by_brand_and_source_id_with_http_info(brand, source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str source_id: comma separated sourceId or empty after / (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand', 'source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_quiz_history_by_brand_and_source_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_quiz_history_by_brand_and_source_id`")  # noqa: E501
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `find_quiz_history_by_brand_and_source_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{brand}/question-engine/history/source-id/{sourceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_quizzes_by_brand(self, brand, source_id, **kwargs):  # noqa: E501
        """findQuizzesByBrand  # noqa: E501

        Retrieve all quizzes by brand and source id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_quizzes_by_brand(brand, source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str source_id: comma separated sourceId or empty after / (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_quizzes_by_brand_with_http_info(brand, source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_quizzes_by_brand_with_http_info(brand, source_id, **kwargs)  # noqa: E501
            return data

    def find_quizzes_by_brand_with_http_info(self, brand, source_id, **kwargs):  # noqa: E501
        """findQuizzesByBrand  # noqa: E501

        Retrieve all quizzes by brand and source id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_quizzes_by_brand_with_http_info(brand, source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param str source_id: comma separated sourceId or empty after / (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand', 'source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_quizzes_by_brand" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_quizzes_by_brand`")  # noqa: E501
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `find_quizzes_by_brand`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{brand}/question-engine/source-id/{sourceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_quizzes_history(self, brand, history_limit, **kwargs):  # noqa: E501
        """findQuizzesHistory  # noqa: E501

        Retrieve quizzes history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_quizzes_history(brand, history_limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param  history_limit: maximum number of items PEAR EACH Quiz History element INCLUDING Live Quiz (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.find_quizzes_history_with_http_info(brand, history_limit, **kwargs)  # noqa: E501
        else:
            (data) = self.find_quizzes_history_with_http_info(brand, history_limit, **kwargs)  # noqa: E501
            return data

    def find_quizzes_history_with_http_info(self, brand, history_limit, **kwargs):  # noqa: E501
        """findQuizzesHistory  # noqa: E501

        Retrieve quizzes history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_quizzes_history_with_http_info(brand, history_limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand: name of brand to return (required)
        :param  history_limit: maximum number of items PEAR EACH Quiz History element INCLUDING Live Quiz (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand', 'history_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_quizzes_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `find_quizzes_history`")  # noqa: E501
        # verify the required parameter '' is set
        if ('history_limit' not in params or
                params['history_limit'] is None):
            raise ValueError("Missing the required parameter `` when calling `find_quizzes_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501
        if 'history_limit' in params:
            path_params['historyLimit'] = params['history_limit']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{brand}/question-engine/history/{previousLimit}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
