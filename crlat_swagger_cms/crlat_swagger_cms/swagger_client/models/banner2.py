# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Banner2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'alt': 'str',
        'brand': 'str',
        'category_id': 'str',
        'desktop_filename': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsfilenameYamlFilename',
        'desktop_height_medium': 'str',
        'desktop_target_uri': 'str',
        'desktop_uri_medium': 'str',
        'desktop_uri_small': 'str',
        'desktop_width_medium': 'str',
        'disabled': 'bool',
        'filename': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsfilenameYamlFilename',
        'image_title': 'str',
        'image_title_brand': 'str',
        'in_app': 'bool',
        'lang': 'str',
        'show_to_customer': 'str',
        'sort_order': 'float',
        'target_uri': 'str',
        'uri_medium': 'str',
        'uri_small': 'str',
        'validity_period_end': 'str',
        'validity_period_start': 'str',
        'vip_levels': 'list[float]',
        'vip_levels_input': 'str',
        'desktop_enabled': 'bool',
        'desktop_in_app': 'bool',
        'enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'alt': 'alt',
        'brand': 'brand',
        'category_id': 'categoryId',
        'desktop_filename': 'desktopFilename',
        'desktop_height_medium': 'desktopHeightMedium',
        'desktop_target_uri': 'desktopTargetUri',
        'desktop_uri_medium': 'desktopUriMedium',
        'desktop_uri_small': 'desktopUriSmall',
        'desktop_width_medium': 'desktopWidthMedium',
        'disabled': 'disabled',
        'filename': 'filename',
        'image_title': 'imageTitle',
        'image_title_brand': 'imageTitle_brand',
        'in_app': 'inApp',
        'lang': 'lang',
        'show_to_customer': 'showToCustomer',
        'sort_order': 'sortOrder',
        'target_uri': 'targetUri',
        'uri_medium': 'uriMedium',
        'uri_small': 'uriSmall',
        'validity_period_end': 'validityPeriodEnd',
        'validity_period_start': 'validityPeriodStart',
        'vip_levels': 'vipLevels',
        'vip_levels_input': 'vipLevelsInput',
        'desktop_enabled': 'desktopEnabled',
        'desktop_in_app': 'desktopInApp',
        'enabled': 'enabled'
    }

    def __init__(self, id=None, alt=None, brand=None, category_id=None, desktop_filename=None, desktop_height_medium=None, desktop_target_uri=None, desktop_uri_medium=None, desktop_uri_small=None, desktop_width_medium=None, disabled=None, filename=None, image_title=None, image_title_brand=None, in_app=None, lang=None, show_to_customer=None, sort_order=None, target_uri=None, uri_medium=None, uri_small=None, validity_period_end=None, validity_period_start=None, vip_levels=None, vip_levels_input=None, desktop_enabled=None, desktop_in_app=None, enabled=None):  # noqa: E501
        """Banner2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._alt = None
        self._brand = None
        self._category_id = None
        self._desktop_filename = None
        self._desktop_height_medium = None
        self._desktop_target_uri = None
        self._desktop_uri_medium = None
        self._desktop_uri_small = None
        self._desktop_width_medium = None
        self._disabled = None
        self._filename = None
        self._image_title = None
        self._image_title_brand = None
        self._in_app = None
        self._lang = None
        self._show_to_customer = None
        self._sort_order = None
        self._target_uri = None
        self._uri_medium = None
        self._uri_small = None
        self._validity_period_end = None
        self._validity_period_start = None
        self._vip_levels = None
        self._vip_levels_input = None
        self._desktop_enabled = None
        self._desktop_in_app = None
        self._enabled = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if alt is not None:
            self.alt = alt
        if brand is not None:
            self.brand = brand
        if category_id is not None:
            self.category_id = category_id
        if desktop_filename is not None:
            self.desktop_filename = desktop_filename
        if desktop_height_medium is not None:
            self.desktop_height_medium = desktop_height_medium
        if desktop_target_uri is not None:
            self.desktop_target_uri = desktop_target_uri
        if desktop_uri_medium is not None:
            self.desktop_uri_medium = desktop_uri_medium
        if desktop_uri_small is not None:
            self.desktop_uri_small = desktop_uri_small
        if desktop_width_medium is not None:
            self.desktop_width_medium = desktop_width_medium
        if disabled is not None:
            self.disabled = disabled
        if filename is not None:
            self.filename = filename
        if image_title is not None:
            self.image_title = image_title
        if image_title_brand is not None:
            self.image_title_brand = image_title_brand
        if in_app is not None:
            self.in_app = in_app
        if lang is not None:
            self.lang = lang
        if show_to_customer is not None:
            self.show_to_customer = show_to_customer
        if sort_order is not None:
            self.sort_order = sort_order
        if target_uri is not None:
            self.target_uri = target_uri
        if uri_medium is not None:
            self.uri_medium = uri_medium
        if uri_small is not None:
            self.uri_small = uri_small
        if validity_period_end is not None:
            self.validity_period_end = validity_period_end
        if validity_period_start is not None:
            self.validity_period_start = validity_period_start
        if vip_levels is not None:
            self.vip_levels = vip_levels
        if vip_levels_input is not None:
            self.vip_levels_input = vip_levels_input
        if desktop_enabled is not None:
            self.desktop_enabled = desktop_enabled
        if desktop_in_app is not None:
            self.desktop_in_app = desktop_in_app
        if enabled is not None:
            self.enabled = enabled

    @property
    def id(self):
        """Gets the id of this Banner2.  # noqa: E501


        :return: The id of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Banner2.


        :param id: The id of this Banner2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def alt(self):
        """Gets the alt of this Banner2.  # noqa: E501


        :return: The alt of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this Banner2.


        :param alt: The alt of this Banner2.  # noqa: E501
        :type: str
        """

        self._alt = alt

    @property
    def brand(self):
        """Gets the brand of this Banner2.  # noqa: E501


        :return: The brand of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Banner2.


        :param brand: The brand of this Banner2.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def category_id(self):
        """Gets the category_id of this Banner2.  # noqa: E501


        :return: The category_id of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Banner2.


        :param category_id: The category_id of this Banner2.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def desktop_filename(self):
        """Gets the desktop_filename of this Banner2.  # noqa: E501


        :return: The desktop_filename of this Banner2.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsfilenameYamlFilename
        """
        return self._desktop_filename

    @desktop_filename.setter
    def desktop_filename(self, desktop_filename):
        """Sets the desktop_filename of this Banner2.


        :param desktop_filename: The desktop_filename of this Banner2.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsfilenameYamlFilename
        """

        self._desktop_filename = desktop_filename

    @property
    def desktop_height_medium(self):
        """Gets the desktop_height_medium of this Banner2.  # noqa: E501


        :return: The desktop_height_medium of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._desktop_height_medium

    @desktop_height_medium.setter
    def desktop_height_medium(self, desktop_height_medium):
        """Sets the desktop_height_medium of this Banner2.


        :param desktop_height_medium: The desktop_height_medium of this Banner2.  # noqa: E501
        :type: str
        """

        self._desktop_height_medium = desktop_height_medium

    @property
    def desktop_target_uri(self):
        """Gets the desktop_target_uri of this Banner2.  # noqa: E501


        :return: The desktop_target_uri of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._desktop_target_uri

    @desktop_target_uri.setter
    def desktop_target_uri(self, desktop_target_uri):
        """Sets the desktop_target_uri of this Banner2.


        :param desktop_target_uri: The desktop_target_uri of this Banner2.  # noqa: E501
        :type: str
        """

        self._desktop_target_uri = desktop_target_uri

    @property
    def desktop_uri_medium(self):
        """Gets the desktop_uri_medium of this Banner2.  # noqa: E501


        :return: The desktop_uri_medium of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._desktop_uri_medium

    @desktop_uri_medium.setter
    def desktop_uri_medium(self, desktop_uri_medium):
        """Sets the desktop_uri_medium of this Banner2.


        :param desktop_uri_medium: The desktop_uri_medium of this Banner2.  # noqa: E501
        :type: str
        """

        self._desktop_uri_medium = desktop_uri_medium

    @property
    def desktop_uri_small(self):
        """Gets the desktop_uri_small of this Banner2.  # noqa: E501


        :return: The desktop_uri_small of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._desktop_uri_small

    @desktop_uri_small.setter
    def desktop_uri_small(self, desktop_uri_small):
        """Sets the desktop_uri_small of this Banner2.


        :param desktop_uri_small: The desktop_uri_small of this Banner2.  # noqa: E501
        :type: str
        """

        self._desktop_uri_small = desktop_uri_small

    @property
    def desktop_width_medium(self):
        """Gets the desktop_width_medium of this Banner2.  # noqa: E501


        :return: The desktop_width_medium of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._desktop_width_medium

    @desktop_width_medium.setter
    def desktop_width_medium(self, desktop_width_medium):
        """Sets the desktop_width_medium of this Banner2.


        :param desktop_width_medium: The desktop_width_medium of this Banner2.  # noqa: E501
        :type: str
        """

        self._desktop_width_medium = desktop_width_medium

    @property
    def disabled(self):
        """Gets the disabled of this Banner2.  # noqa: E501


        :return: The disabled of this Banner2.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Banner2.


        :param disabled: The disabled of this Banner2.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def filename(self):
        """Gets the filename of this Banner2.  # noqa: E501


        :return: The filename of this Banner2.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsfilenameYamlFilename
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Banner2.


        :param filename: The filename of this Banner2.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsfilenameYamlFilename
        """

        self._filename = filename

    @property
    def image_title(self):
        """Gets the image_title of this Banner2.  # noqa: E501


        :return: The image_title of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._image_title

    @image_title.setter
    def image_title(self, image_title):
        """Sets the image_title of this Banner2.


        :param image_title: The image_title of this Banner2.  # noqa: E501
        :type: str
        """

        self._image_title = image_title

    @property
    def image_title_brand(self):
        """Gets the image_title_brand of this Banner2.  # noqa: E501


        :return: The image_title_brand of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._image_title_brand

    @image_title_brand.setter
    def image_title_brand(self, image_title_brand):
        """Sets the image_title_brand of this Banner2.


        :param image_title_brand: The image_title_brand of this Banner2.  # noqa: E501
        :type: str
        """

        self._image_title_brand = image_title_brand

    @property
    def in_app(self):
        """Gets the in_app of this Banner2.  # noqa: E501


        :return: The in_app of this Banner2.  # noqa: E501
        :rtype: bool
        """
        return self._in_app

    @in_app.setter
    def in_app(self, in_app):
        """Sets the in_app of this Banner2.


        :param in_app: The in_app of this Banner2.  # noqa: E501
        :type: bool
        """

        self._in_app = in_app

    @property
    def lang(self):
        """Gets the lang of this Banner2.  # noqa: E501


        :return: The lang of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Banner2.


        :param lang: The lang of this Banner2.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def show_to_customer(self):
        """Gets the show_to_customer of this Banner2.  # noqa: E501


        :return: The show_to_customer of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._show_to_customer

    @show_to_customer.setter
    def show_to_customer(self, show_to_customer):
        """Sets the show_to_customer of this Banner2.


        :param show_to_customer: The show_to_customer of this Banner2.  # noqa: E501
        :type: str
        """

        self._show_to_customer = show_to_customer

    @property
    def sort_order(self):
        """Gets the sort_order of this Banner2.  # noqa: E501


        :return: The sort_order of this Banner2.  # noqa: E501
        :rtype: float
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Banner2.


        :param sort_order: The sort_order of this Banner2.  # noqa: E501
        :type: float
        """

        self._sort_order = sort_order

    @property
    def target_uri(self):
        """Gets the target_uri of this Banner2.  # noqa: E501


        :return: The target_uri of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._target_uri

    @target_uri.setter
    def target_uri(self, target_uri):
        """Sets the target_uri of this Banner2.


        :param target_uri: The target_uri of this Banner2.  # noqa: E501
        :type: str
        """

        self._target_uri = target_uri

    @property
    def uri_medium(self):
        """Gets the uri_medium of this Banner2.  # noqa: E501


        :return: The uri_medium of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._uri_medium

    @uri_medium.setter
    def uri_medium(self, uri_medium):
        """Sets the uri_medium of this Banner2.


        :param uri_medium: The uri_medium of this Banner2.  # noqa: E501
        :type: str
        """

        self._uri_medium = uri_medium

    @property
    def uri_small(self):
        """Gets the uri_small of this Banner2.  # noqa: E501


        :return: The uri_small of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._uri_small

    @uri_small.setter
    def uri_small(self, uri_small):
        """Sets the uri_small of this Banner2.


        :param uri_small: The uri_small of this Banner2.  # noqa: E501
        :type: str
        """

        self._uri_small = uri_small

    @property
    def validity_period_end(self):
        """Gets the validity_period_end of this Banner2.  # noqa: E501


        :return: The validity_period_end of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._validity_period_end

    @validity_period_end.setter
    def validity_period_end(self, validity_period_end):
        """Sets the validity_period_end of this Banner2.


        :param validity_period_end: The validity_period_end of this Banner2.  # noqa: E501
        :type: str
        """

        self._validity_period_end = validity_period_end

    @property
    def validity_period_start(self):
        """Gets the validity_period_start of this Banner2.  # noqa: E501


        :return: The validity_period_start of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._validity_period_start

    @validity_period_start.setter
    def validity_period_start(self, validity_period_start):
        """Sets the validity_period_start of this Banner2.


        :param validity_period_start: The validity_period_start of this Banner2.  # noqa: E501
        :type: str
        """

        self._validity_period_start = validity_period_start

    @property
    def vip_levels(self):
        """Gets the vip_levels of this Banner2.  # noqa: E501


        :return: The vip_levels of this Banner2.  # noqa: E501
        :rtype: list[float]
        """
        return self._vip_levels

    @vip_levels.setter
    def vip_levels(self, vip_levels):
        """Sets the vip_levels of this Banner2.


        :param vip_levels: The vip_levels of this Banner2.  # noqa: E501
        :type: list[float]
        """

        self._vip_levels = vip_levels

    @property
    def vip_levels_input(self):
        """Gets the vip_levels_input of this Banner2.  # noqa: E501


        :return: The vip_levels_input of this Banner2.  # noqa: E501
        :rtype: str
        """
        return self._vip_levels_input

    @vip_levels_input.setter
    def vip_levels_input(self, vip_levels_input):
        """Sets the vip_levels_input of this Banner2.


        :param vip_levels_input: The vip_levels_input of this Banner2.  # noqa: E501
        :type: str
        """

        self._vip_levels_input = vip_levels_input

    @property
    def desktop_enabled(self):
        """Gets the desktop_enabled of this Banner2.  # noqa: E501


        :return: The desktop_enabled of this Banner2.  # noqa: E501
        :rtype: bool
        """
        return self._desktop_enabled

    @desktop_enabled.setter
    def desktop_enabled(self, desktop_enabled):
        """Sets the desktop_enabled of this Banner2.


        :param desktop_enabled: The desktop_enabled of this Banner2.  # noqa: E501
        :type: bool
        """

        self._desktop_enabled = desktop_enabled

    @property
    def desktop_in_app(self):
        """Gets the desktop_in_app of this Banner2.  # noqa: E501


        :return: The desktop_in_app of this Banner2.  # noqa: E501
        :rtype: bool
        """
        return self._desktop_in_app

    @desktop_in_app.setter
    def desktop_in_app(self, desktop_in_app):
        """Sets the desktop_in_app of this Banner2.


        :param desktop_in_app: The desktop_in_app of this Banner2.  # noqa: E501
        :type: bool
        """

        self._desktop_in_app = desktop_in_app

    @property
    def enabled(self):
        """Gets the enabled of this Banner2.  # noqa: E501


        :return: The enabled of this Banner2.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Banner2.


        :param enabled: The enabled of this Banner2.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Banner2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Banner2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
