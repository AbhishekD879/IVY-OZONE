# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Brand2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'key': 'str',
        'sort_order': 'float',
        'brand_code': 'str',
        'title': 'str',
        'disabled': 'bool',
        'akamai_url': 'str',
        'akamai_path': 'str'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'sort_order': 'sortOrder',
        'brand_code': 'brandCode',
        'title': 'title',
        'disabled': 'disabled',
        'akamai_url': 'akamaiUrl',
        'akamai_path': 'akamaiPath'
    }

    def __init__(self, id=None, key=None, sort_order=None, brand_code=None, title=None, disabled=None, akamai_url=None, akamai_path=None):  # noqa: E501
        """Brand2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._key = None
        self._sort_order = None
        self._brand_code = None
        self._title = None
        self._disabled = None
        self._akamai_url = None
        self._akamai_path = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if sort_order is not None:
            self.sort_order = sort_order
        if brand_code is not None:
            self.brand_code = brand_code
        if title is not None:
            self.title = title
        if disabled is not None:
            self.disabled = disabled
        if akamai_url is not None:
            self.akamai_url = akamai_url
        if akamai_path is not None:
            self.akamai_path = akamai_path

    @property
    def id(self):
        """Gets the id of this Brand2.  # noqa: E501


        :return: The id of this Brand2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Brand2.


        :param id: The id of this Brand2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this Brand2.  # noqa: E501


        :return: The key of this Brand2.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Brand2.


        :param key: The key of this Brand2.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def sort_order(self):
        """Gets the sort_order of this Brand2.  # noqa: E501


        :return: The sort_order of this Brand2.  # noqa: E501
        :rtype: float
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Brand2.


        :param sort_order: The sort_order of this Brand2.  # noqa: E501
        :type: float
        """

        self._sort_order = sort_order

    @property
    def brand_code(self):
        """Gets the brand_code of this Brand2.  # noqa: E501


        :return: The brand_code of this Brand2.  # noqa: E501
        :rtype: str
        """
        return self._brand_code

    @brand_code.setter
    def brand_code(self, brand_code):
        """Sets the brand_code of this Brand2.


        :param brand_code: The brand_code of this Brand2.  # noqa: E501
        :type: str
        """

        self._brand_code = brand_code

    @property
    def title(self):
        """Gets the title of this Brand2.  # noqa: E501


        :return: The title of this Brand2.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Brand2.


        :param title: The title of this Brand2.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def disabled(self):
        """Gets the disabled of this Brand2.  # noqa: E501


        :return: The disabled of this Brand2.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Brand2.


        :param disabled: The disabled of this Brand2.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def akamai_url(self):
        """Gets the akamai_url of this Brand2.  # noqa: E501


        :return: The akamai_url of this Brand2.  # noqa: E501
        :rtype: str
        """
        return self._akamai_url

    @akamai_url.setter
    def akamai_url(self, akamai_url):
        """Sets the akamai_url of this Brand2.


        :param akamai_url: The akamai_url of this Brand2.  # noqa: E501
        :type: str
        """

        self._akamai_url = akamai_url

    @property
    def akamai_path(self):
        """Gets the akamai_path of this Brand2.  # noqa: E501


        :return: The akamai_path of this Brand2.  # noqa: E501
        :rtype: str
        """
        return self._akamai_path

    @akamai_path.setter
    def akamai_path(self, akamai_path):
        """Sets the akamai_path of this Brand2.


        :param akamai_path: The akamai_path of this Brand2.  # noqa: E501
        :type: str
        """

        self._akamai_path = akamai_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Brand2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Brand2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
