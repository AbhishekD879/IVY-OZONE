# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Competition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'uri': 'str',
        'type_id': 'float',
        'enabled': 'bool',
        'competition_tabs': 'list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionTabYamlCompetitionTab]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'uri': 'uri',
        'type_id': 'typeId',
        'enabled': 'enabled',
        'competition_tabs': 'competitionTabs'
    }

    def __init__(self, id=None, name=None, uri=None, type_id=None, enabled=None, competition_tabs=None):  # noqa: E501
        """Competition - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._uri = None
        self._type_id = None
        self._enabled = None
        self._competition_tabs = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if uri is not None:
            self.uri = uri
        if type_id is not None:
            self.type_id = type_id
        if enabled is not None:
            self.enabled = enabled
        if competition_tabs is not None:
            self.competition_tabs = competition_tabs

    @property
    def id(self):
        """Gets the id of this Competition.  # noqa: E501


        :return: The id of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Competition.


        :param id: The id of this Competition.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Competition.  # noqa: E501


        :return: The name of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Competition.


        :param name: The name of this Competition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uri(self):
        """Gets the uri of this Competition.  # noqa: E501


        :return: The uri of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Competition.


        :param uri: The uri of this Competition.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def type_id(self):
        """Gets the type_id of this Competition.  # noqa: E501


        :return: The type_id of this Competition.  # noqa: E501
        :rtype: float
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this Competition.


        :param type_id: The type_id of this Competition.  # noqa: E501
        :type: float
        """

        self._type_id = type_id

    @property
    def enabled(self):
        """Gets the enabled of this Competition.  # noqa: E501


        :return: The enabled of this Competition.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Competition.


        :param enabled: The enabled of this Competition.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def competition_tabs(self):
        """Gets the competition_tabs of this Competition.  # noqa: E501


        :return: The competition_tabs of this Competition.  # noqa: E501
        :rtype: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionTabYamlCompetitionTab]
        """
        return self._competition_tabs

    @competition_tabs.setter
    def competition_tabs(self, competition_tabs):
        """Sets the competition_tabs of this Competition.


        :param competition_tabs: The competition_tabs of this Competition.  # noqa: E501
        :type: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionTabYamlCompetitionTab]
        """

        self._competition_tabs = competition_tabs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Competition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Competition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
