# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CompetitionModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'enabled': 'bool',
        'type': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionModuleTypeYamlCompetitionModuleType',
        'max_display': 'float',
        'promo_tag': 'str',
        'view_type': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsviewTypeYamlViewType',
        'group_module_data': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionGroupModuleDataYamlGroupModuleData',
        'knockout_module_data': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionKnockoutModuleDataYamlKnockoutModuleData',
        'special_module_data': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionSpecialModuleDataYamlSpecialModuleData',
        'markets': 'list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionMarketYamlCompetitionMarket]',
        'event_ids': 'list[float]',
        'result_module_season_id': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'enabled': 'enabled',
        'type': 'type',
        'max_display': 'maxDisplay',
        'promo_tag': 'promoTag',
        'view_type': 'viewType',
        'group_module_data': 'groupModuleData',
        'knockout_module_data': 'knockoutModuleData',
        'special_module_data': 'specialModuleData',
        'markets': 'markets',
        'event_ids': 'eventIds',
        'result_module_season_id': 'resultModuleSeasonId'
    }

    def __init__(self, id=None, name=None, enabled=None, type=None, max_display=None, promo_tag=None, view_type=None, group_module_data=None, knockout_module_data=None, special_module_data=None, markets=None, event_ids=None, result_module_season_id=None):  # noqa: E501
        """CompetitionModule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._enabled = None
        self._type = None
        self._max_display = None
        self._promo_tag = None
        self._view_type = None
        self._group_module_data = None
        self._knockout_module_data = None
        self._special_module_data = None
        self._markets = None
        self._event_ids = None
        self._result_module_season_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if enabled is not None:
            self.enabled = enabled
        if type is not None:
            self.type = type
        if max_display is not None:
            self.max_display = max_display
        if promo_tag is not None:
            self.promo_tag = promo_tag
        if view_type is not None:
            self.view_type = view_type
        if group_module_data is not None:
            self.group_module_data = group_module_data
        if knockout_module_data is not None:
            self.knockout_module_data = knockout_module_data
        if special_module_data is not None:
            self.special_module_data = special_module_data
        if markets is not None:
            self.markets = markets
        if event_ids is not None:
            self.event_ids = event_ids
        if result_module_season_id is not None:
            self.result_module_season_id = result_module_season_id

    @property
    def id(self):
        """Gets the id of this CompetitionModule.  # noqa: E501


        :return: The id of this CompetitionModule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompetitionModule.


        :param id: The id of this CompetitionModule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CompetitionModule.  # noqa: E501


        :return: The name of this CompetitionModule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompetitionModule.


        :param name: The name of this CompetitionModule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this CompetitionModule.  # noqa: E501


        :return: The enabled of this CompetitionModule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CompetitionModule.


        :param enabled: The enabled of this CompetitionModule.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def type(self):
        """Gets the type of this CompetitionModule.  # noqa: E501


        :return: The type of this CompetitionModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionModuleTypeYamlCompetitionModuleType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompetitionModule.


        :param type: The type of this CompetitionModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionModuleTypeYamlCompetitionModuleType
        """

        self._type = type

    @property
    def max_display(self):
        """Gets the max_display of this CompetitionModule.  # noqa: E501


        :return: The max_display of this CompetitionModule.  # noqa: E501
        :rtype: float
        """
        return self._max_display

    @max_display.setter
    def max_display(self, max_display):
        """Sets the max_display of this CompetitionModule.


        :param max_display: The max_display of this CompetitionModule.  # noqa: E501
        :type: float
        """

        self._max_display = max_display

    @property
    def promo_tag(self):
        """Gets the promo_tag of this CompetitionModule.  # noqa: E501


        :return: The promo_tag of this CompetitionModule.  # noqa: E501
        :rtype: str
        """
        return self._promo_tag

    @promo_tag.setter
    def promo_tag(self, promo_tag):
        """Sets the promo_tag of this CompetitionModule.


        :param promo_tag: The promo_tag of this CompetitionModule.  # noqa: E501
        :type: str
        """

        self._promo_tag = promo_tag

    @property
    def view_type(self):
        """Gets the view_type of this CompetitionModule.  # noqa: E501


        :return: The view_type of this CompetitionModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsviewTypeYamlViewType
        """
        return self._view_type

    @view_type.setter
    def view_type(self, view_type):
        """Sets the view_type of this CompetitionModule.


        :param view_type: The view_type of this CompetitionModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsviewTypeYamlViewType
        """

        self._view_type = view_type

    @property
    def group_module_data(self):
        """Gets the group_module_data of this CompetitionModule.  # noqa: E501


        :return: The group_module_data of this CompetitionModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionGroupModuleDataYamlGroupModuleData
        """
        return self._group_module_data

    @group_module_data.setter
    def group_module_data(self, group_module_data):
        """Sets the group_module_data of this CompetitionModule.


        :param group_module_data: The group_module_data of this CompetitionModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionGroupModuleDataYamlGroupModuleData
        """

        self._group_module_data = group_module_data

    @property
    def knockout_module_data(self):
        """Gets the knockout_module_data of this CompetitionModule.  # noqa: E501


        :return: The knockout_module_data of this CompetitionModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionKnockoutModuleDataYamlKnockoutModuleData
        """
        return self._knockout_module_data

    @knockout_module_data.setter
    def knockout_module_data(self, knockout_module_data):
        """Sets the knockout_module_data of this CompetitionModule.


        :param knockout_module_data: The knockout_module_data of this CompetitionModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionKnockoutModuleDataYamlKnockoutModuleData
        """

        self._knockout_module_data = knockout_module_data

    @property
    def special_module_data(self):
        """Gets the special_module_data of this CompetitionModule.  # noqa: E501


        :return: The special_module_data of this CompetitionModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionSpecialModuleDataYamlSpecialModuleData
        """
        return self._special_module_data

    @special_module_data.setter
    def special_module_data(self, special_module_data):
        """Sets the special_module_data of this CompetitionModule.


        :param special_module_data: The special_module_data of this CompetitionModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionSpecialModuleDataYamlSpecialModuleData
        """

        self._special_module_data = special_module_data

    @property
    def markets(self):
        """Gets the markets of this CompetitionModule.  # noqa: E501


        :return: The markets of this CompetitionModule.  # noqa: E501
        :rtype: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionMarketYamlCompetitionMarket]
        """
        return self._markets

    @markets.setter
    def markets(self, markets):
        """Sets the markets of this CompetitionModule.


        :param markets: The markets of this CompetitionModule.  # noqa: E501
        :type: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentscompetitionMarketYamlCompetitionMarket]
        """

        self._markets = markets

    @property
    def event_ids(self):
        """Gets the event_ids of this CompetitionModule.  # noqa: E501


        :return: The event_ids of this CompetitionModule.  # noqa: E501
        :rtype: list[float]
        """
        return self._event_ids

    @event_ids.setter
    def event_ids(self, event_ids):
        """Sets the event_ids of this CompetitionModule.


        :param event_ids: The event_ids of this CompetitionModule.  # noqa: E501
        :type: list[float]
        """

        self._event_ids = event_ids

    @property
    def result_module_season_id(self):
        """Gets the result_module_season_id of this CompetitionModule.  # noqa: E501


        :return: The result_module_season_id of this CompetitionModule.  # noqa: E501
        :rtype: float
        """
        return self._result_module_season_id

    @result_module_season_id.setter
    def result_module_season_id(self, result_module_season_id):
        """Sets the result_module_season_id of this CompetitionModule.


        :param result_module_season_id: The result_module_season_id of this CompetitionModule.  # noqa: E501
        :type: float
        """

        self._result_module_season_id = result_module_season_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompetitionModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompetitionModule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
