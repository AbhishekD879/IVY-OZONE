# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FeaturedEventsType2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'rows_num': 'float',
        'type_id': 'float',
        'name': 'str',
        'collapsed': 'bool',
        'disabled': 'bool',
        'validity_period_end': 'str',
        'validity_period_start': 'str',
        'sport_categories': 'str',
        'brand': 'str',
        'lang': 'str'
    }

    attribute_map = {
        'id': 'id',
        'rows_num': 'rowsNum',
        'type_id': 'typeId',
        'name': 'name',
        'collapsed': 'collapsed',
        'disabled': 'disabled',
        'validity_period_end': 'validityPeriodEnd',
        'validity_period_start': 'validityPeriodStart',
        'sport_categories': 'sportCategories',
        'brand': 'brand',
        'lang': 'lang'
    }

    def __init__(self, id=None, rows_num=None, type_id=None, name=None, collapsed=None, disabled=None, validity_period_end=None, validity_period_start=None, sport_categories=None, brand=None, lang=None):  # noqa: E501
        """FeaturedEventsType2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._rows_num = None
        self._type_id = None
        self._name = None
        self._collapsed = None
        self._disabled = None
        self._validity_period_end = None
        self._validity_period_start = None
        self._sport_categories = None
        self._brand = None
        self._lang = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if rows_num is not None:
            self.rows_num = rows_num
        if type_id is not None:
            self.type_id = type_id
        if name is not None:
            self.name = name
        if collapsed is not None:
            self.collapsed = collapsed
        if disabled is not None:
            self.disabled = disabled
        if validity_period_end is not None:
            self.validity_period_end = validity_period_end
        if validity_period_start is not None:
            self.validity_period_start = validity_period_start
        if sport_categories is not None:
            self.sport_categories = sport_categories
        if brand is not None:
            self.brand = brand
        if lang is not None:
            self.lang = lang

    @property
    def id(self):
        """Gets the id of this FeaturedEventsType2.  # noqa: E501


        :return: The id of this FeaturedEventsType2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FeaturedEventsType2.


        :param id: The id of this FeaturedEventsType2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rows_num(self):
        """Gets the rows_num of this FeaturedEventsType2.  # noqa: E501


        :return: The rows_num of this FeaturedEventsType2.  # noqa: E501
        :rtype: float
        """
        return self._rows_num

    @rows_num.setter
    def rows_num(self, rows_num):
        """Sets the rows_num of this FeaturedEventsType2.


        :param rows_num: The rows_num of this FeaturedEventsType2.  # noqa: E501
        :type: float
        """

        self._rows_num = rows_num

    @property
    def type_id(self):
        """Gets the type_id of this FeaturedEventsType2.  # noqa: E501


        :return: The type_id of this FeaturedEventsType2.  # noqa: E501
        :rtype: float
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this FeaturedEventsType2.


        :param type_id: The type_id of this FeaturedEventsType2.  # noqa: E501
        :type: float
        """

        self._type_id = type_id

    @property
    def name(self):
        """Gets the name of this FeaturedEventsType2.  # noqa: E501


        :return: The name of this FeaturedEventsType2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeaturedEventsType2.


        :param name: The name of this FeaturedEventsType2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def collapsed(self):
        """Gets the collapsed of this FeaturedEventsType2.  # noqa: E501


        :return: The collapsed of this FeaturedEventsType2.  # noqa: E501
        :rtype: bool
        """
        return self._collapsed

    @collapsed.setter
    def collapsed(self, collapsed):
        """Sets the collapsed of this FeaturedEventsType2.


        :param collapsed: The collapsed of this FeaturedEventsType2.  # noqa: E501
        :type: bool
        """

        self._collapsed = collapsed

    @property
    def disabled(self):
        """Gets the disabled of this FeaturedEventsType2.  # noqa: E501


        :return: The disabled of this FeaturedEventsType2.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this FeaturedEventsType2.


        :param disabled: The disabled of this FeaturedEventsType2.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def validity_period_end(self):
        """Gets the validity_period_end of this FeaturedEventsType2.  # noqa: E501


        :return: The validity_period_end of this FeaturedEventsType2.  # noqa: E501
        :rtype: str
        """
        return self._validity_period_end

    @validity_period_end.setter
    def validity_period_end(self, validity_period_end):
        """Sets the validity_period_end of this FeaturedEventsType2.


        :param validity_period_end: The validity_period_end of this FeaturedEventsType2.  # noqa: E501
        :type: str
        """

        self._validity_period_end = validity_period_end

    @property
    def validity_period_start(self):
        """Gets the validity_period_start of this FeaturedEventsType2.  # noqa: E501


        :return: The validity_period_start of this FeaturedEventsType2.  # noqa: E501
        :rtype: str
        """
        return self._validity_period_start

    @validity_period_start.setter
    def validity_period_start(self, validity_period_start):
        """Sets the validity_period_start of this FeaturedEventsType2.


        :param validity_period_start: The validity_period_start of this FeaturedEventsType2.  # noqa: E501
        :type: str
        """

        self._validity_period_start = validity_period_start

    @property
    def sport_categories(self):
        """Gets the sport_categories of this FeaturedEventsType2.  # noqa: E501


        :return: The sport_categories of this FeaturedEventsType2.  # noqa: E501
        :rtype: str
        """
        return self._sport_categories

    @sport_categories.setter
    def sport_categories(self, sport_categories):
        """Sets the sport_categories of this FeaturedEventsType2.


        :param sport_categories: The sport_categories of this FeaturedEventsType2.  # noqa: E501
        :type: str
        """

        self._sport_categories = sport_categories

    @property
    def brand(self):
        """Gets the brand of this FeaturedEventsType2.  # noqa: E501


        :return: The brand of this FeaturedEventsType2.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this FeaturedEventsType2.


        :param brand: The brand of this FeaturedEventsType2.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def lang(self):
        """Gets the lang of this FeaturedEventsType2.  # noqa: E501


        :return: The lang of this FeaturedEventsType2.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this FeaturedEventsType2.


        :param lang: The lang of this FeaturedEventsType2.  # noqa: E501
        :type: str
        """

        self._lang = lang

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeaturedEventsType2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturedEventsType2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
