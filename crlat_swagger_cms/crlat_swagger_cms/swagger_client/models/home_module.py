# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HomeModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'display_order': 'float',
        'show_expanded': 'bool',
        'nav_item': 'str',
        'max_rows': 'float',
        'data': 'list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsdatumYamlDatum]',
        'data_selection': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsdataSelectionYamlDataSelection',
        'footer_link': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsfooterLinkYamlFooterLink',
        'publish_to_channels': 'list[str]',
        'visibility': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsvisibilityYamlVisibility',
        'total_events': 'float',
        'events_selection_settings': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentseventsSelectionSettingsYamlEventsSelectionSettings',
        'published_devices': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentspublishedDevicesYamlPublishedDevices',
        'max_selections': 'float',
        'show_events_for_days': 'float',
        'page_id': 'str',
        'page_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'display_order': 'displayOrder',
        'show_expanded': 'showExpanded',
        'nav_item': 'navItem',
        'max_rows': 'maxRows',
        'data': 'data',
        'data_selection': 'dataSelection',
        'footer_link': 'footerLink',
        'publish_to_channels': 'publishToChannels',
        'visibility': 'visibility',
        'total_events': 'totalEvents',
        'events_selection_settings': 'eventsSelectionSettings',
        'published_devices': 'publishedDevices',
        'max_selections': 'maxSelections',
        'show_events_for_days': 'showEventsForDays',
        'page_id': 'pageId',
        'page_type': 'pageType'
    }

    def __init__(self, id=None, title=None, display_order=None, show_expanded=None, nav_item=None, max_rows=None, data=None, data_selection=None, footer_link=None, publish_to_channels=None, visibility=None, total_events=None, events_selection_settings=None, published_devices=None, max_selections=None, show_events_for_days=None, page_id=None, page_type=None):  # noqa: E501
        """HomeModule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._display_order = None
        self._show_expanded = None
        self._nav_item = None
        self._max_rows = None
        self._data = None
        self._data_selection = None
        self._footer_link = None
        self._publish_to_channels = None
        self._visibility = None
        self._total_events = None
        self._events_selection_settings = None
        self._published_devices = None
        self._max_selections = None
        self._show_events_for_days = None
        self._page_id = None
        self._page_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if display_order is not None:
            self.display_order = display_order
        if show_expanded is not None:
            self.show_expanded = show_expanded
        if nav_item is not None:
            self.nav_item = nav_item
        if max_rows is not None:
            self.max_rows = max_rows
        if data is not None:
            self.data = data
        if data_selection is not None:
            self.data_selection = data_selection
        if footer_link is not None:
            self.footer_link = footer_link
        if publish_to_channels is not None:
            self.publish_to_channels = publish_to_channels
        if visibility is not None:
            self.visibility = visibility
        if total_events is not None:
            self.total_events = total_events
        if events_selection_settings is not None:
            self.events_selection_settings = events_selection_settings
        if published_devices is not None:
            self.published_devices = published_devices
        if max_selections is not None:
            self.max_selections = max_selections
        if show_events_for_days is not None:
            self.show_events_for_days = show_events_for_days
        if page_id is not None:
            self.page_id = page_id
        if page_type is not None:
            self.page_type = page_type

    @property
    def id(self):
        """Gets the id of this HomeModule.  # noqa: E501


        :return: The id of this HomeModule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HomeModule.


        :param id: The id of this HomeModule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this HomeModule.  # noqa: E501


        :return: The title of this HomeModule.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this HomeModule.


        :param title: The title of this HomeModule.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def display_order(self):
        """Gets the display_order of this HomeModule.  # noqa: E501


        :return: The display_order of this HomeModule.  # noqa: E501
        :rtype: float
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this HomeModule.


        :param display_order: The display_order of this HomeModule.  # noqa: E501
        :type: float
        """

        self._display_order = display_order

    @property
    def show_expanded(self):
        """Gets the show_expanded of this HomeModule.  # noqa: E501


        :return: The show_expanded of this HomeModule.  # noqa: E501
        :rtype: bool
        """
        return self._show_expanded

    @show_expanded.setter
    def show_expanded(self, show_expanded):
        """Sets the show_expanded of this HomeModule.


        :param show_expanded: The show_expanded of this HomeModule.  # noqa: E501
        :type: bool
        """

        self._show_expanded = show_expanded

    @property
    def nav_item(self):
        """Gets the nav_item of this HomeModule.  # noqa: E501


        :return: The nav_item of this HomeModule.  # noqa: E501
        :rtype: str
        """
        return self._nav_item

    @nav_item.setter
    def nav_item(self, nav_item):
        """Sets the nav_item of this HomeModule.


        :param nav_item: The nav_item of this HomeModule.  # noqa: E501
        :type: str
        """

        self._nav_item = nav_item

    @property
    def max_rows(self):
        """Gets the max_rows of this HomeModule.  # noqa: E501


        :return: The max_rows of this HomeModule.  # noqa: E501
        :rtype: float
        """
        return self._max_rows

    @max_rows.setter
    def max_rows(self, max_rows):
        """Sets the max_rows of this HomeModule.


        :param max_rows: The max_rows of this HomeModule.  # noqa: E501
        :type: float
        """

        self._max_rows = max_rows

    @property
    def data(self):
        """Gets the data of this HomeModule.  # noqa: E501


        :return: The data of this HomeModule.  # noqa: E501
        :rtype: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsdatumYamlDatum]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HomeModule.


        :param data: The data of this HomeModule.  # noqa: E501
        :type: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsdatumYamlDatum]
        """

        self._data = data

    @property
    def data_selection(self):
        """Gets the data_selection of this HomeModule.  # noqa: E501


        :return: The data_selection of this HomeModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsdataSelectionYamlDataSelection
        """
        return self._data_selection

    @data_selection.setter
    def data_selection(self, data_selection):
        """Sets the data_selection of this HomeModule.


        :param data_selection: The data_selection of this HomeModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsdataSelectionYamlDataSelection
        """

        self._data_selection = data_selection

    @property
    def footer_link(self):
        """Gets the footer_link of this HomeModule.  # noqa: E501


        :return: The footer_link of this HomeModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsfooterLinkYamlFooterLink
        """
        return self._footer_link

    @footer_link.setter
    def footer_link(self, footer_link):
        """Sets the footer_link of this HomeModule.


        :param footer_link: The footer_link of this HomeModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsfooterLinkYamlFooterLink
        """

        self._footer_link = footer_link

    @property
    def publish_to_channels(self):
        """Gets the publish_to_channels of this HomeModule.  # noqa: E501


        :return: The publish_to_channels of this HomeModule.  # noqa: E501
        :rtype: list[str]
        """
        return self._publish_to_channels

    @publish_to_channels.setter
    def publish_to_channels(self, publish_to_channels):
        """Sets the publish_to_channels of this HomeModule.


        :param publish_to_channels: The publish_to_channels of this HomeModule.  # noqa: E501
        :type: list[str]
        """

        self._publish_to_channels = publish_to_channels

    @property
    def visibility(self):
        """Gets the visibility of this HomeModule.  # noqa: E501


        :return: The visibility of this HomeModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsvisibilityYamlVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this HomeModule.


        :param visibility: The visibility of this HomeModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsvisibilityYamlVisibility
        """

        self._visibility = visibility

    @property
    def total_events(self):
        """Gets the total_events of this HomeModule.  # noqa: E501


        :return: The total_events of this HomeModule.  # noqa: E501
        :rtype: float
        """
        return self._total_events

    @total_events.setter
    def total_events(self, total_events):
        """Sets the total_events of this HomeModule.


        :param total_events: The total_events of this HomeModule.  # noqa: E501
        :type: float
        """

        self._total_events = total_events

    @property
    def events_selection_settings(self):
        """Gets the events_selection_settings of this HomeModule.  # noqa: E501


        :return: The events_selection_settings of this HomeModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentseventsSelectionSettingsYamlEventsSelectionSettings
        """
        return self._events_selection_settings

    @events_selection_settings.setter
    def events_selection_settings(self, events_selection_settings):
        """Sets the events_selection_settings of this HomeModule.


        :param events_selection_settings: The events_selection_settings of this HomeModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentseventsSelectionSettingsYamlEventsSelectionSettings
        """

        self._events_selection_settings = events_selection_settings

    @property
    def published_devices(self):
        """Gets the published_devices of this HomeModule.  # noqa: E501


        :return: The published_devices of this HomeModule.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentspublishedDevicesYamlPublishedDevices
        """
        return self._published_devices

    @published_devices.setter
    def published_devices(self, published_devices):
        """Sets the published_devices of this HomeModule.


        :param published_devices: The published_devices of this HomeModule.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentspublishedDevicesYamlPublishedDevices
        """

        self._published_devices = published_devices

    @property
    def max_selections(self):
        """Gets the max_selections of this HomeModule.  # noqa: E501


        :return: The max_selections of this HomeModule.  # noqa: E501
        :rtype: float
        """
        return self._max_selections

    @max_selections.setter
    def max_selections(self, max_selections):
        """Sets the max_selections of this HomeModule.


        :param max_selections: The max_selections of this HomeModule.  # noqa: E501
        :type: float
        """

        self._max_selections = max_selections

    @property
    def show_events_for_days(self):
        """Gets the show_events_for_days of this HomeModule.  # noqa: E501


        :return: The show_events_for_days of this HomeModule.  # noqa: E501
        :rtype: float
        """
        return self._show_events_for_days

    @show_events_for_days.setter
    def show_events_for_days(self, show_events_for_days):
        """Sets the show_events_for_days of this HomeModule.


        :param show_events_for_days: The show_events_for_days of this HomeModule.  # noqa: E501
        :type: float
        """

        self._show_events_for_days = show_events_for_days

    @property
    def page_id(self):
        """Gets the page_id of this HomeModule.  # noqa: E501


        :return: The page_id of this HomeModule.  # noqa: E501
        :rtype: str
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this HomeModule.


        :param page_id: The page_id of this HomeModule.  # noqa: E501
        :type: str
        """

        self._page_id = page_id

    @property
    def page_type(self):
        """Gets the page_type of this HomeModule.  # noqa: E501


        :return: The page_type of this HomeModule.  # noqa: E501
        :rtype: str
        """
        return self._page_type

    @page_type.setter
    def page_type(self, page_type):
        """Sets the page_type of this HomeModule.


        :param page_type: The page_type of this HomeModule.  # noqa: E501
        :type: str
        """

        self._page_type = page_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HomeModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HomeModule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
