# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class League(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sort_order': 'float',
        'redirection_url': 'str',
        'league_url': 'str',
        'bet_builder_url': 'str',
        'banner': 'str',
        'name': 'str',
        'lang': 'str',
        'brand': 'str',
        'category_id': 'float',
        'type_id': 'float',
        'ss_category_code': 'str',
        'tablet_banner': 'str'
    }

    attribute_map = {
        'id': 'id',
        'sort_order': 'sortOrder',
        'redirection_url': 'redirectionUrl',
        'league_url': 'leagueUrl',
        'bet_builder_url': 'betBuilderUrl',
        'banner': 'banner',
        'name': 'name',
        'lang': 'lang',
        'brand': 'brand',
        'category_id': 'categoryId',
        'type_id': 'typeId',
        'ss_category_code': 'ssCategoryCode',
        'tablet_banner': 'tabletBanner'
    }

    def __init__(self, id=None, sort_order=None, redirection_url=None, league_url=None, bet_builder_url=None, banner=None, name=None, lang=None, brand=None, category_id=None, type_id=None, ss_category_code=None, tablet_banner=None):  # noqa: E501
        """League - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sort_order = None
        self._redirection_url = None
        self._league_url = None
        self._bet_builder_url = None
        self._banner = None
        self._name = None
        self._lang = None
        self._brand = None
        self._category_id = None
        self._type_id = None
        self._ss_category_code = None
        self._tablet_banner = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if sort_order is not None:
            self.sort_order = sort_order
        if redirection_url is not None:
            self.redirection_url = redirection_url
        if league_url is not None:
            self.league_url = league_url
        if bet_builder_url is not None:
            self.bet_builder_url = bet_builder_url
        if banner is not None:
            self.banner = banner
        if name is not None:
            self.name = name
        if lang is not None:
            self.lang = lang
        if brand is not None:
            self.brand = brand
        if category_id is not None:
            self.category_id = category_id
        if type_id is not None:
            self.type_id = type_id
        if ss_category_code is not None:
            self.ss_category_code = ss_category_code
        if tablet_banner is not None:
            self.tablet_banner = tablet_banner

    @property
    def id(self):
        """Gets the id of this League.  # noqa: E501


        :return: The id of this League.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this League.


        :param id: The id of this League.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sort_order(self):
        """Gets the sort_order of this League.  # noqa: E501


        :return: The sort_order of this League.  # noqa: E501
        :rtype: float
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this League.


        :param sort_order: The sort_order of this League.  # noqa: E501
        :type: float
        """

        self._sort_order = sort_order

    @property
    def redirection_url(self):
        """Gets the redirection_url of this League.  # noqa: E501


        :return: The redirection_url of this League.  # noqa: E501
        :rtype: str
        """
        return self._redirection_url

    @redirection_url.setter
    def redirection_url(self, redirection_url):
        """Sets the redirection_url of this League.


        :param redirection_url: The redirection_url of this League.  # noqa: E501
        :type: str
        """

        self._redirection_url = redirection_url

    @property
    def league_url(self):
        """Gets the league_url of this League.  # noqa: E501


        :return: The league_url of this League.  # noqa: E501
        :rtype: str
        """
        return self._league_url

    @league_url.setter
    def league_url(self, league_url):
        """Sets the league_url of this League.


        :param league_url: The league_url of this League.  # noqa: E501
        :type: str
        """

        self._league_url = league_url

    @property
    def bet_builder_url(self):
        """Gets the bet_builder_url of this League.  # noqa: E501


        :return: The bet_builder_url of this League.  # noqa: E501
        :rtype: str
        """
        return self._bet_builder_url

    @bet_builder_url.setter
    def bet_builder_url(self, bet_builder_url):
        """Sets the bet_builder_url of this League.


        :param bet_builder_url: The bet_builder_url of this League.  # noqa: E501
        :type: str
        """

        self._bet_builder_url = bet_builder_url

    @property
    def banner(self):
        """Gets the banner of this League.  # noqa: E501


        :return: The banner of this League.  # noqa: E501
        :rtype: str
        """
        return self._banner

    @banner.setter
    def banner(self, banner):
        """Sets the banner of this League.


        :param banner: The banner of this League.  # noqa: E501
        :type: str
        """

        self._banner = banner

    @property
    def name(self):
        """Gets the name of this League.  # noqa: E501


        :return: The name of this League.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this League.


        :param name: The name of this League.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def lang(self):
        """Gets the lang of this League.  # noqa: E501


        :return: The lang of this League.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this League.


        :param lang: The lang of this League.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def brand(self):
        """Gets the brand of this League.  # noqa: E501


        :return: The brand of this League.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this League.


        :param brand: The brand of this League.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def category_id(self):
        """Gets the category_id of this League.  # noqa: E501


        :return: The category_id of this League.  # noqa: E501
        :rtype: float
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this League.


        :param category_id: The category_id of this League.  # noqa: E501
        :type: float
        """

        self._category_id = category_id

    @property
    def type_id(self):
        """Gets the type_id of this League.  # noqa: E501


        :return: The type_id of this League.  # noqa: E501
        :rtype: float
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this League.


        :param type_id: The type_id of this League.  # noqa: E501
        :type: float
        """

        self._type_id = type_id

    @property
    def ss_category_code(self):
        """Gets the ss_category_code of this League.  # noqa: E501


        :return: The ss_category_code of this League.  # noqa: E501
        :rtype: str
        """
        return self._ss_category_code

    @ss_category_code.setter
    def ss_category_code(self, ss_category_code):
        """Sets the ss_category_code of this League.


        :param ss_category_code: The ss_category_code of this League.  # noqa: E501
        :type: str
        """

        self._ss_category_code = ss_category_code

    @property
    def tablet_banner(self):
        """Gets the tablet_banner of this League.  # noqa: E501


        :return: The tablet_banner of this League.  # noqa: E501
        :rtype: str
        """
        return self._tablet_banner

    @tablet_banner.setter
    def tablet_banner(self, tablet_banner):
        """Sets the tablet_banner of this League.


        :param tablet_banner: The tablet_banner of this League.  # noqa: E501
        :type: str
        """

        self._tablet_banner = tablet_banner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(League, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, League):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
