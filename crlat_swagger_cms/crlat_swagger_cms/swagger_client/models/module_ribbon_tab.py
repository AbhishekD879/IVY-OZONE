# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ModuleRibbonTab(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'brand': 'str',
        'directive_name': 'str',
        'key': 'str',
        'lang': 'str',
        'sort_order': 'float',
        'target_uri': 'str',
        'title': 'str',
        'title_brand': 'str',
        'visible': 'bool',
        'show_tab_on': 'str',
        'devices': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsdevicesYamlDevices',
        'url': 'str',
        'internal_id': 'str',
        'hub_index': 'float',
        'display_from': 'str',
        'display_to': 'str'
    }

    attribute_map = {
        'id': 'id',
        'brand': 'brand',
        'directive_name': 'directiveName',
        'key': 'key',
        'lang': 'lang',
        'sort_order': 'sortOrder',
        'target_uri': 'targetUri',
        'title': 'title',
        'title_brand': 'title_brand',
        'visible': 'visible',
        'show_tab_on': 'showTabOn',
        'devices': 'devices',
        'url': 'url',
        'internal_id': 'internalId',
        'hub_index': 'hubIndex',
        'display_from': 'displayFrom',
        'display_to': 'displayTo'
    }

    def __init__(self, id=None, brand=None, directive_name=None, key=None, lang=None, sort_order=None, target_uri=None, title=None, title_brand=None, visible=None, show_tab_on=None, devices=None, url=None, internal_id=None, hub_index=None, display_from=None, display_to=None):  # noqa: E501
        """ModuleRibbonTab - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._brand = None
        self._directive_name = None
        self._key = None
        self._lang = None
        self._sort_order = None
        self._target_uri = None
        self._title = None
        self._title_brand = None
        self._visible = None
        self._show_tab_on = None
        self._devices = None
        self._url = None
        self._internal_id = None
        self._hub_index = None
        self._display_from = None
        self._display_to = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if brand is not None:
            self.brand = brand
        if directive_name is not None:
            self.directive_name = directive_name
        if key is not None:
            self.key = key
        if lang is not None:
            self.lang = lang
        if sort_order is not None:
            self.sort_order = sort_order
        if target_uri is not None:
            self.target_uri = target_uri
        if title is not None:
            self.title = title
        if title_brand is not None:
            self.title_brand = title_brand
        if visible is not None:
            self.visible = visible
        if show_tab_on is not None:
            self.show_tab_on = show_tab_on
        if devices is not None:
            self.devices = devices
        if url is not None:
            self.url = url
        if internal_id is not None:
            self.internal_id = internal_id
        if hub_index is not None:
            self.hub_index = hub_index
        if display_from is not None:
            self.display_from = display_from
        if display_to is not None:
            self.display_to = display_to

    @property
    def id(self):
        """Gets the id of this ModuleRibbonTab.  # noqa: E501


        :return: The id of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModuleRibbonTab.


        :param id: The id of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def brand(self):
        """Gets the brand of this ModuleRibbonTab.  # noqa: E501


        :return: The brand of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ModuleRibbonTab.


        :param brand: The brand of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def directive_name(self):
        """Gets the directive_name of this ModuleRibbonTab.  # noqa: E501


        :return: The directive_name of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._directive_name

    @directive_name.setter
    def directive_name(self, directive_name):
        """Sets the directive_name of this ModuleRibbonTab.


        :param directive_name: The directive_name of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._directive_name = directive_name

    @property
    def key(self):
        """Gets the key of this ModuleRibbonTab.  # noqa: E501


        :return: The key of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ModuleRibbonTab.


        :param key: The key of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def lang(self):
        """Gets the lang of this ModuleRibbonTab.  # noqa: E501


        :return: The lang of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this ModuleRibbonTab.


        :param lang: The lang of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def sort_order(self):
        """Gets the sort_order of this ModuleRibbonTab.  # noqa: E501


        :return: The sort_order of this ModuleRibbonTab.  # noqa: E501
        :rtype: float
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ModuleRibbonTab.


        :param sort_order: The sort_order of this ModuleRibbonTab.  # noqa: E501
        :type: float
        """

        self._sort_order = sort_order

    @property
    def target_uri(self):
        """Gets the target_uri of this ModuleRibbonTab.  # noqa: E501


        :return: The target_uri of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._target_uri

    @target_uri.setter
    def target_uri(self, target_uri):
        """Sets the target_uri of this ModuleRibbonTab.


        :param target_uri: The target_uri of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._target_uri = target_uri

    @property
    def title(self):
        """Gets the title of this ModuleRibbonTab.  # noqa: E501


        :return: The title of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ModuleRibbonTab.


        :param title: The title of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def title_brand(self):
        """Gets the title_brand of this ModuleRibbonTab.  # noqa: E501


        :return: The title_brand of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._title_brand

    @title_brand.setter
    def title_brand(self, title_brand):
        """Sets the title_brand of this ModuleRibbonTab.


        :param title_brand: The title_brand of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._title_brand = title_brand

    @property
    def visible(self):
        """Gets the visible of this ModuleRibbonTab.  # noqa: E501


        :return: The visible of this ModuleRibbonTab.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ModuleRibbonTab.


        :param visible: The visible of this ModuleRibbonTab.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def show_tab_on(self):
        """Gets the show_tab_on of this ModuleRibbonTab.  # noqa: E501


        :return: The show_tab_on of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._show_tab_on

    @show_tab_on.setter
    def show_tab_on(self, show_tab_on):
        """Sets the show_tab_on of this ModuleRibbonTab.


        :param show_tab_on: The show_tab_on of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._show_tab_on = show_tab_on

    @property
    def devices(self):
        """Gets the devices of this ModuleRibbonTab.  # noqa: E501


        :return: The devices of this ModuleRibbonTab.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsdevicesYamlDevices
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this ModuleRibbonTab.


        :param devices: The devices of this ModuleRibbonTab.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsdevicesYamlDevices
        """

        self._devices = devices

    @property
    def url(self):
        """Gets the url of this ModuleRibbonTab.  # noqa: E501


        :return: The url of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ModuleRibbonTab.


        :param url: The url of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def internal_id(self):
        """Gets the internal_id of this ModuleRibbonTab.  # noqa: E501


        :return: The internal_id of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this ModuleRibbonTab.


        :param internal_id: The internal_id of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._internal_id = internal_id

    @property
    def hub_index(self):
        """Gets the hub_index of this ModuleRibbonTab.  # noqa: E501


        :return: The hub_index of this ModuleRibbonTab.  # noqa: E501
        :rtype: float
        """
        return self._hub_index

    @hub_index.setter
    def hub_index(self, hub_index):
        """Sets the hub_index of this ModuleRibbonTab.


        :param hub_index: The hub_index of this ModuleRibbonTab.  # noqa: E501
        :type: float
        """

        self._hub_index = hub_index

    @property
    def display_from(self):
        """Gets the display_from of this ModuleRibbonTab.  # noqa: E501


        :return: The display_from of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._display_from

    @display_from.setter
    def display_from(self, display_from):
        """Sets the display_from of this ModuleRibbonTab.


        :param display_from: The display_from of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._display_from = display_from

    @property
    def display_to(self):
        """Gets the display_to of this ModuleRibbonTab.  # noqa: E501


        :return: The display_to of this ModuleRibbonTab.  # noqa: E501
        :rtype: str
        """
        return self._display_to

    @display_to.setter
    def display_to(self, display_to):
        """Sets the display_to of this ModuleRibbonTab.


        :param display_to: The display_to of this ModuleRibbonTab.  # noqa: E501
        :type: str
        """

        self._display_to = display_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModuleRibbonTab, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModuleRibbonTab):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
