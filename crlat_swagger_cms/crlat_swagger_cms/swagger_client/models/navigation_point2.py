# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NavigationPoint2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'brand': 'str',
        'category_id': 'list[float]',
        'competition_id': 'list[str]',
        'home_tabs': 'list[str]',
        'enabled': 'bool',
        'target_uri': 'str',
        'title': 'str',
        'description': 'str',
        'validity_period_end': 'str',
        'validity_period_start': 'str'
    }

    attribute_map = {
        'id': 'id',
        'brand': 'brand',
        'category_id': 'categoryId',
        'competition_id': 'competitionId',
        'home_tabs': 'homeTabs',
        'enabled': 'enabled',
        'target_uri': 'targetUri',
        'title': 'title',
        'description': 'description',
        'validity_period_end': 'validityPeriodEnd',
        'validity_period_start': 'validityPeriodStart'
    }

    def __init__(self, id=None, brand=None, category_id=None, competition_id=None, home_tabs=None, enabled=None, target_uri=None, title=None, description=None, validity_period_end=None, validity_period_start=None):  # noqa: E501
        """NavigationPoint2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._brand = None
        self._category_id = None
        self._competition_id = None
        self._home_tabs = None
        self._enabled = None
        self._target_uri = None
        self._title = None
        self._description = None
        self._validity_period_end = None
        self._validity_period_start = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if brand is not None:
            self.brand = brand
        if category_id is not None:
            self.category_id = category_id
        if competition_id is not None:
            self.competition_id = competition_id
        if home_tabs is not None:
            self.home_tabs = home_tabs
        if enabled is not None:
            self.enabled = enabled
        if target_uri is not None:
            self.target_uri = target_uri
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if validity_period_end is not None:
            self.validity_period_end = validity_period_end
        if validity_period_start is not None:
            self.validity_period_start = validity_period_start

    @property
    def id(self):
        """Gets the id of this NavigationPoint2.  # noqa: E501


        :return: The id of this NavigationPoint2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NavigationPoint2.


        :param id: The id of this NavigationPoint2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def brand(self):
        """Gets the brand of this NavigationPoint2.  # noqa: E501


        :return: The brand of this NavigationPoint2.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this NavigationPoint2.


        :param brand: The brand of this NavigationPoint2.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def category_id(self):
        """Gets the category_id of this NavigationPoint2.  # noqa: E501


        :return: The category_id of this NavigationPoint2.  # noqa: E501
        :rtype: list[float]
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this NavigationPoint2.


        :param category_id: The category_id of this NavigationPoint2.  # noqa: E501
        :type: list[float]
        """

        self._category_id = category_id

    @property
    def competition_id(self):
        """Gets the competition_id of this NavigationPoint2.  # noqa: E501


        :return: The competition_id of this NavigationPoint2.  # noqa: E501
        :rtype: list[str]
        """
        return self._competition_id

    @competition_id.setter
    def competition_id(self, competition_id):
        """Sets the competition_id of this NavigationPoint2.


        :param competition_id: The competition_id of this NavigationPoint2.  # noqa: E501
        :type: list[str]
        """

        self._competition_id = competition_id

    @property
    def home_tabs(self):
        """Gets the home_tabs of this NavigationPoint2.  # noqa: E501


        :return: The home_tabs of this NavigationPoint2.  # noqa: E501
        :rtype: list[str]
        """
        return self._home_tabs

    @home_tabs.setter
    def home_tabs(self, home_tabs):
        """Sets the home_tabs of this NavigationPoint2.


        :param home_tabs: The home_tabs of this NavigationPoint2.  # noqa: E501
        :type: list[str]
        """

        self._home_tabs = home_tabs

    @property
    def enabled(self):
        """Gets the enabled of this NavigationPoint2.  # noqa: E501


        :return: The enabled of this NavigationPoint2.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NavigationPoint2.


        :param enabled: The enabled of this NavigationPoint2.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def target_uri(self):
        """Gets the target_uri of this NavigationPoint2.  # noqa: E501


        :return: The target_uri of this NavigationPoint2.  # noqa: E501
        :rtype: str
        """
        return self._target_uri

    @target_uri.setter
    def target_uri(self, target_uri):
        """Sets the target_uri of this NavigationPoint2.


        :param target_uri: The target_uri of this NavigationPoint2.  # noqa: E501
        :type: str
        """

        self._target_uri = target_uri

    @property
    def title(self):
        """Gets the title of this NavigationPoint2.  # noqa: E501


        :return: The title of this NavigationPoint2.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NavigationPoint2.


        :param title: The title of this NavigationPoint2.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this NavigationPoint2.  # noqa: E501


        :return: The description of this NavigationPoint2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NavigationPoint2.


        :param description: The description of this NavigationPoint2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def validity_period_end(self):
        """Gets the validity_period_end of this NavigationPoint2.  # noqa: E501


        :return: The validity_period_end of this NavigationPoint2.  # noqa: E501
        :rtype: str
        """
        return self._validity_period_end

    @validity_period_end.setter
    def validity_period_end(self, validity_period_end):
        """Sets the validity_period_end of this NavigationPoint2.


        :param validity_period_end: The validity_period_end of this NavigationPoint2.  # noqa: E501
        :type: str
        """

        self._validity_period_end = validity_period_end

    @property
    def validity_period_start(self):
        """Gets the validity_period_start of this NavigationPoint2.  # noqa: E501


        :return: The validity_period_start of this NavigationPoint2.  # noqa: E501
        :rtype: str
        """
        return self._validity_period_start

    @validity_period_start.setter
    def validity_period_start(self, validity_period_start):
        """Sets the validity_period_start of this NavigationPoint2.


        :param validity_period_start: The validity_period_start of this NavigationPoint2.  # noqa: E501
        :type: str
        """

        self._validity_period_start = validity_period_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NavigationPoint2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NavigationPoint2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
