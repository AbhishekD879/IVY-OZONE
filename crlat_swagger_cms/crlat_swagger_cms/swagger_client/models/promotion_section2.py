# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PromotionSection2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'promotion_ids': 'str',
        'name': 'str',
        'brand': 'str',
        'disabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'promotion_ids': 'promotionIds',
        'name': 'name',
        'brand': 'brand',
        'disabled': 'disabled'
    }

    def __init__(self, id=None, promotion_ids=None, name=None, brand=None, disabled=None):  # noqa: E501
        """PromotionSection2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._promotion_ids = None
        self._name = None
        self._brand = None
        self._disabled = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if promotion_ids is not None:
            self.promotion_ids = promotion_ids
        if name is not None:
            self.name = name
        if brand is not None:
            self.brand = brand
        if disabled is not None:
            self.disabled = disabled

    @property
    def id(self):
        """Gets the id of this PromotionSection2.  # noqa: E501


        :return: The id of this PromotionSection2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PromotionSection2.


        :param id: The id of this PromotionSection2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def promotion_ids(self):
        """Gets the promotion_ids of this PromotionSection2.  # noqa: E501


        :return: The promotion_ids of this PromotionSection2.  # noqa: E501
        :rtype: str
        """
        return self._promotion_ids

    @promotion_ids.setter
    def promotion_ids(self, promotion_ids):
        """Sets the promotion_ids of this PromotionSection2.


        :param promotion_ids: The promotion_ids of this PromotionSection2.  # noqa: E501
        :type: str
        """

        self._promotion_ids = promotion_ids

    @property
    def name(self):
        """Gets the name of this PromotionSection2.  # noqa: E501


        :return: The name of this PromotionSection2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PromotionSection2.


        :param name: The name of this PromotionSection2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def brand(self):
        """Gets the brand of this PromotionSection2.  # noqa: E501


        :return: The brand of this PromotionSection2.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PromotionSection2.


        :param brand: The brand of this PromotionSection2.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def disabled(self):
        """Gets the disabled of this PromotionSection2.  # noqa: E501


        :return: The disabled of this PromotionSection2.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this PromotionSection2.


        :param disabled: The disabled of this PromotionSection2.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromotionSection2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromotionSection2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
