# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SeoPage2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'brand': 'str',
        'changefreq': 'str',
        'description': 'str',
        'disabled': 'bool',
        'lang': 'str',
        'static_block': 'str',
        'title': 'str',
        'url': 'str',
        'url_brand': 'str',
        'priority': 'str'
    }

    attribute_map = {
        'id': 'id',
        'brand': 'brand',
        'changefreq': 'changefreq',
        'description': 'description',
        'disabled': 'disabled',
        'lang': 'lang',
        'static_block': 'staticBlock',
        'title': 'title',
        'url': 'url',
        'url_brand': 'urlBrand',
        'priority': 'priority'
    }

    def __init__(self, id=None, brand=None, changefreq=None, description=None, disabled=None, lang=None, static_block=None, title=None, url=None, url_brand=None, priority=None):  # noqa: E501
        """SeoPage2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._brand = None
        self._changefreq = None
        self._description = None
        self._disabled = None
        self._lang = None
        self._static_block = None
        self._title = None
        self._url = None
        self._url_brand = None
        self._priority = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if brand is not None:
            self.brand = brand
        if changefreq is not None:
            self.changefreq = changefreq
        if description is not None:
            self.description = description
        if disabled is not None:
            self.disabled = disabled
        if lang is not None:
            self.lang = lang
        if static_block is not None:
            self.static_block = static_block
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url
        if url_brand is not None:
            self.url_brand = url_brand
        if priority is not None:
            self.priority = priority

    @property
    def id(self):
        """Gets the id of this SeoPage2.  # noqa: E501


        :return: The id of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SeoPage2.


        :param id: The id of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def brand(self):
        """Gets the brand of this SeoPage2.  # noqa: E501


        :return: The brand of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this SeoPage2.


        :param brand: The brand of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def changefreq(self):
        """Gets the changefreq of this SeoPage2.  # noqa: E501


        :return: The changefreq of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._changefreq

    @changefreq.setter
    def changefreq(self, changefreq):
        """Sets the changefreq of this SeoPage2.


        :param changefreq: The changefreq of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._changefreq = changefreq

    @property
    def description(self):
        """Gets the description of this SeoPage2.  # noqa: E501


        :return: The description of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SeoPage2.


        :param description: The description of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this SeoPage2.  # noqa: E501


        :return: The disabled of this SeoPage2.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this SeoPage2.


        :param disabled: The disabled of this SeoPage2.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def lang(self):
        """Gets the lang of this SeoPage2.  # noqa: E501


        :return: The lang of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this SeoPage2.


        :param lang: The lang of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def static_block(self):
        """Gets the static_block of this SeoPage2.  # noqa: E501


        :return: The static_block of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._static_block

    @static_block.setter
    def static_block(self, static_block):
        """Sets the static_block of this SeoPage2.


        :param static_block: The static_block of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._static_block = static_block

    @property
    def title(self):
        """Gets the title of this SeoPage2.  # noqa: E501


        :return: The title of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SeoPage2.


        :param title: The title of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this SeoPage2.  # noqa: E501


        :return: The url of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SeoPage2.


        :param url: The url of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def url_brand(self):
        """Gets the url_brand of this SeoPage2.  # noqa: E501


        :return: The url_brand of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._url_brand

    @url_brand.setter
    def url_brand(self, url_brand):
        """Sets the url_brand of this SeoPage2.


        :param url_brand: The url_brand of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._url_brand = url_brand

    @property
    def priority(self):
        """Gets the priority of this SeoPage2.  # noqa: E501


        :return: The priority of this SeoPage2.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SeoPage2.


        :param priority: The priority of this SeoPage2.  # noqa: E501
        :type: str
        """

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SeoPage2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeoPage2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
