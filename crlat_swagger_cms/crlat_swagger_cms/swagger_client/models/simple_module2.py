# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SimpleModule2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'display_order': 'int',
        'original_name': 'str',
        'display_name': 'str',
        'disabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'display_order': 'displayOrder',
        'original_name': 'originalName',
        'display_name': 'displayName',
        'disabled': 'disabled'
    }

    def __init__(self, id=None, description=None, display_order=None, original_name=None, display_name=None, disabled=None):  # noqa: E501
        """SimpleModule2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._display_order = None
        self._original_name = None
        self._display_name = None
        self._disabled = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if display_order is not None:
            self.display_order = display_order
        if original_name is not None:
            self.original_name = original_name
        if display_name is not None:
            self.display_name = display_name
        if disabled is not None:
            self.disabled = disabled

    @property
    def id(self):
        """Gets the id of this SimpleModule2.  # noqa: E501


        :return: The id of this SimpleModule2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimpleModule2.


        :param id: The id of this SimpleModule2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this SimpleModule2.  # noqa: E501


        :return: The description of this SimpleModule2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SimpleModule2.


        :param description: The description of this SimpleModule2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_order(self):
        """Gets the display_order of this SimpleModule2.  # noqa: E501


        :return: The display_order of this SimpleModule2.  # noqa: E501
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this SimpleModule2.


        :param display_order: The display_order of this SimpleModule2.  # noqa: E501
        :type: int
        """

        self._display_order = display_order

    @property
    def original_name(self):
        """Gets the original_name of this SimpleModule2.  # noqa: E501


        :return: The original_name of this SimpleModule2.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this SimpleModule2.


        :param original_name: The original_name of this SimpleModule2.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def display_name(self):
        """Gets the display_name of this SimpleModule2.  # noqa: E501


        :return: The display_name of this SimpleModule2.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SimpleModule2.


        :param display_name: The display_name of this SimpleModule2.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def disabled(self):
        """Gets the disabled of this SimpleModule2.  # noqa: E501


        :return: The disabled of this SimpleModule2.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this SimpleModule2.


        :param disabled: The disabled of this SimpleModule2.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleModule2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleModule2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
