# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SportQuickLink2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'brand': 'str',
        'disabled': 'bool',
        'svg': 'str',
        'svg_filename': 'UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentssvgFilenameYamlSvgFilename',
        'sort_order': 'float',
        'destination': 'str',
        'title': 'str',
        'sport_id': 'float',
        'page_type': 'str',
        'page_id': 'float',
        'validity_period_end': 'str',
        'validity_period_start': 'str'
    }

    attribute_map = {
        'id': 'id',
        'brand': 'brand',
        'disabled': 'disabled',
        'svg': 'svg',
        'svg_filename': 'svgFilename',
        'sort_order': 'sortOrder',
        'destination': 'destination',
        'title': 'title',
        'sport_id': 'sportId',
        'page_type': 'pageType',
        'page_id': 'pageId',
        'validity_period_end': 'validityPeriodEnd',
        'validity_period_start': 'validityPeriodStart'
    }

    def __init__(self, id=None, brand=None, disabled=None, svg=None, svg_filename=None, sort_order=None, destination=None, title=None, sport_id=None, page_type=None, page_id=None, validity_period_end=None, validity_period_start=None):  # noqa: E501
        """SportQuickLink2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._brand = None
        self._disabled = None
        self._svg = None
        self._svg_filename = None
        self._sort_order = None
        self._destination = None
        self._title = None
        self._sport_id = None
        self._page_type = None
        self._page_id = None
        self._validity_period_end = None
        self._validity_period_start = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if brand is not None:
            self.brand = brand
        if disabled is not None:
            self.disabled = disabled
        if svg is not None:
            self.svg = svg
        if svg_filename is not None:
            self.svg_filename = svg_filename
        if sort_order is not None:
            self.sort_order = sort_order
        if destination is not None:
            self.destination = destination
        if title is not None:
            self.title = title
        if sport_id is not None:
            self.sport_id = sport_id
        if page_type is not None:
            self.page_type = page_type
        if page_id is not None:
            self.page_id = page_id
        if validity_period_end is not None:
            self.validity_period_end = validity_period_end
        if validity_period_start is not None:
            self.validity_period_start = validity_period_start

    @property
    def id(self):
        """Gets the id of this SportQuickLink2.  # noqa: E501


        :return: The id of this SportQuickLink2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SportQuickLink2.


        :param id: The id of this SportQuickLink2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def brand(self):
        """Gets the brand of this SportQuickLink2.  # noqa: E501


        :return: The brand of this SportQuickLink2.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this SportQuickLink2.


        :param brand: The brand of this SportQuickLink2.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def disabled(self):
        """Gets the disabled of this SportQuickLink2.  # noqa: E501


        :return: The disabled of this SportQuickLink2.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this SportQuickLink2.


        :param disabled: The disabled of this SportQuickLink2.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def svg(self):
        """Gets the svg of this SportQuickLink2.  # noqa: E501


        :return: The svg of this SportQuickLink2.  # noqa: E501
        :rtype: str
        """
        return self._svg

    @svg.setter
    def svg(self, svg):
        """Sets the svg of this SportQuickLink2.


        :param svg: The svg of this SportQuickLink2.  # noqa: E501
        :type: str
        """

        self._svg = svg

    @property
    def svg_filename(self):
        """Gets the svg_filename of this SportQuickLink2.  # noqa: E501


        :return: The svg_filename of this SportQuickLink2.  # noqa: E501
        :rtype: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentssvgFilenameYamlSvgFilename
        """
        return self._svg_filename

    @svg_filename.setter
    def svg_filename(self, svg_filename):
        """Sets the svg_filename of this SportQuickLink2.


        :param svg_filename: The svg_filename of this SportQuickLink2.  # noqa: E501
        :type: UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentssvgFilenameYamlSvgFilename
        """

        self._svg_filename = svg_filename

    @property
    def sort_order(self):
        """Gets the sort_order of this SportQuickLink2.  # noqa: E501


        :return: The sort_order of this SportQuickLink2.  # noqa: E501
        :rtype: float
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SportQuickLink2.


        :param sort_order: The sort_order of this SportQuickLink2.  # noqa: E501
        :type: float
        """

        self._sort_order = sort_order

    @property
    def destination(self):
        """Gets the destination of this SportQuickLink2.  # noqa: E501


        :return: The destination of this SportQuickLink2.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this SportQuickLink2.


        :param destination: The destination of this SportQuickLink2.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def title(self):
        """Gets the title of this SportQuickLink2.  # noqa: E501


        :return: The title of this SportQuickLink2.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SportQuickLink2.


        :param title: The title of this SportQuickLink2.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def sport_id(self):
        """Gets the sport_id of this SportQuickLink2.  # noqa: E501


        :return: The sport_id of this SportQuickLink2.  # noqa: E501
        :rtype: float
        """
        return self._sport_id

    @sport_id.setter
    def sport_id(self, sport_id):
        """Sets the sport_id of this SportQuickLink2.


        :param sport_id: The sport_id of this SportQuickLink2.  # noqa: E501
        :type: float
        """

        self._sport_id = sport_id

    @property
    def page_type(self):
        """Gets the page_type of this SportQuickLink2.  # noqa: E501


        :return: The page_type of this SportQuickLink2.  # noqa: E501
        :rtype: str
        """
        return self._page_type

    @page_type.setter
    def page_type(self, page_type):
        """Sets the page_type of this SportQuickLink2.


        :param page_type: The page_type of this SportQuickLink2.  # noqa: E501
        :type: str
        """

        self._page_type = page_type

    @property
    def page_id(self):
        """Gets the page_id of this SportQuickLink2.  # noqa: E501


        :return: The page_id of this SportQuickLink2.  # noqa: E501
        :rtype: float
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this SportQuickLink2.


        :param page_id: The page_id of this SportQuickLink2.  # noqa: E501
        :type: float
        """

        self._page_id = page_id

    @property
    def validity_period_end(self):
        """Gets the validity_period_end of this SportQuickLink2.  # noqa: E501


        :return: The validity_period_end of this SportQuickLink2.  # noqa: E501
        :rtype: str
        """
        return self._validity_period_end

    @validity_period_end.setter
    def validity_period_end(self, validity_period_end):
        """Sets the validity_period_end of this SportQuickLink2.


        :param validity_period_end: The validity_period_end of this SportQuickLink2.  # noqa: E501
        :type: str
        """

        self._validity_period_end = validity_period_end

    @property
    def validity_period_start(self):
        """Gets the validity_period_start of this SportQuickLink2.  # noqa: E501


        :return: The validity_period_start of this SportQuickLink2.  # noqa: E501
        :rtype: str
        """
        return self._validity_period_start

    @validity_period_start.setter
    def validity_period_start(self, validity_period_start):
        """Sets the validity_period_start of this SportQuickLink2.


        :param validity_period_start: The validity_period_start of this SportQuickLink2.  # noqa: E501
        :type: str
        """

        self._validity_period_start = validity_period_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SportQuickLink2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SportQuickLink2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
