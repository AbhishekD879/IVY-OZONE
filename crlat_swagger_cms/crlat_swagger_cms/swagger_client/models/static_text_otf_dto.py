# coding: utf-8

"""
    Oxygen CMS Public REST API

    This page contains only public GET request available on cms_api_tests. All models & requests have been taken from bma-cms_api_tests project.   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StaticTextOtfDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_name': 'str',
        'title': 'str',
        'page_text1': 'str',
        'page_text2': 'str',
        'page_text3': 'str',
        'page_text4': 'str',
        'page_text5': 'str',
        'cta_text1': 'str',
        'cta_text2': 'str'
    }

    attribute_map = {
        'page_name': 'pageName',
        'title': 'title',
        'page_text1': 'pageText1',
        'page_text2': 'pageText2',
        'page_text3': 'pageText3',
        'page_text4': 'pageText4',
        'page_text5': 'pageText5',
        'cta_text1': 'ctaText1',
        'cta_text2': 'ctaText2'
    }

    def __init__(self, page_name=None, title=None, page_text1=None, page_text2=None, page_text3=None, page_text4=None, page_text5=None, cta_text1=None, cta_text2=None):  # noqa: E501
        """StaticTextOtfDto - a model defined in Swagger"""  # noqa: E501
        self._page_name = None
        self._title = None
        self._page_text1 = None
        self._page_text2 = None
        self._page_text3 = None
        self._page_text4 = None
        self._page_text5 = None
        self._cta_text1 = None
        self._cta_text2 = None
        self.discriminator = None
        if page_name is not None:
            self.page_name = page_name
        if title is not None:
            self.title = title
        if page_text1 is not None:
            self.page_text1 = page_text1
        if page_text2 is not None:
            self.page_text2 = page_text2
        if page_text3 is not None:
            self.page_text3 = page_text3
        if page_text4 is not None:
            self.page_text4 = page_text4
        if page_text5 is not None:
            self.page_text5 = page_text5
        if cta_text1 is not None:
            self.cta_text1 = cta_text1
        if cta_text2 is not None:
            self.cta_text2 = cta_text2

    @property
    def page_name(self):
        """Gets the page_name of this StaticTextOtfDto.  # noqa: E501


        :return: The page_name of this StaticTextOtfDto.  # noqa: E501
        :rtype: str
        """
        return self._page_name

    @page_name.setter
    def page_name(self, page_name):
        """Sets the page_name of this StaticTextOtfDto.


        :param page_name: The page_name of this StaticTextOtfDto.  # noqa: E501
        :type: str
        """

        self._page_name = page_name

    @property
    def title(self):
        """Gets the title of this StaticTextOtfDto.  # noqa: E501


        :return: The title of this StaticTextOtfDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StaticTextOtfDto.


        :param title: The title of this StaticTextOtfDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def page_text1(self):
        """Gets the page_text1 of this StaticTextOtfDto.  # noqa: E501


        :return: The page_text1 of this StaticTextOtfDto.  # noqa: E501
        :rtype: str
        """
        return self._page_text1

    @page_text1.setter
    def page_text1(self, page_text1):
        """Sets the page_text1 of this StaticTextOtfDto.


        :param page_text1: The page_text1 of this StaticTextOtfDto.  # noqa: E501
        :type: str
        """

        self._page_text1 = page_text1

    @property
    def page_text2(self):
        """Gets the page_text2 of this StaticTextOtfDto.  # noqa: E501


        :return: The page_text2 of this StaticTextOtfDto.  # noqa: E501
        :rtype: str
        """
        return self._page_text2

    @page_text2.setter
    def page_text2(self, page_text2):
        """Sets the page_text2 of this StaticTextOtfDto.


        :param page_text2: The page_text2 of this StaticTextOtfDto.  # noqa: E501
        :type: str
        """

        self._page_text2 = page_text2

    @property
    def page_text3(self):
        """Gets the page_text3 of this StaticTextOtfDto.  # noqa: E501


        :return: The page_text3 of this StaticTextOtfDto.  # noqa: E501
        :rtype: str
        """
        return self._page_text3

    @page_text3.setter
    def page_text3(self, page_text3):
        """Sets the page_text3 of this StaticTextOtfDto.


        :param page_text3: The page_text3 of this StaticTextOtfDto.  # noqa: E501
        :type: str
        """

        self._page_text3 = page_text3

    @property
    def page_text4(self):
        """Gets the page_text4 of this StaticTextOtfDto.  # noqa: E501


        :return: The page_text4 of this StaticTextOtfDto.  # noqa: E501
        :rtype: str
        """
        return self._page_text4

    @page_text4.setter
    def page_text4(self, page_text4):
        """Sets the page_text4 of this StaticTextOtfDto.


        :param page_text4: The page_text4 of this StaticTextOtfDto.  # noqa: E501
        :type: str
        """

        self._page_text4 = page_text4

    @property
    def page_text5(self):
        """Gets the page_text5 of this StaticTextOtfDto.  # noqa: E501


        :return: The page_text5 of this StaticTextOtfDto.  # noqa: E501
        :rtype: str
        """
        return self._page_text5

    @page_text5.setter
    def page_text5(self, page_text5):
        """Sets the page_text5 of this StaticTextOtfDto.


        :param page_text5: The page_text5 of this StaticTextOtfDto.  # noqa: E501
        :type: str
        """

        self._page_text5 = page_text5

    @property
    def cta_text1(self):
        """Gets the cta_text1 of this StaticTextOtfDto.  # noqa: E501


        :return: The cta_text1 of this StaticTextOtfDto.  # noqa: E501
        :rtype: str
        """
        return self._cta_text1

    @cta_text1.setter
    def cta_text1(self, cta_text1):
        """Sets the cta_text1 of this StaticTextOtfDto.


        :param cta_text1: The cta_text1 of this StaticTextOtfDto.  # noqa: E501
        :type: str
        """

        self._cta_text1 = cta_text1

    @property
    def cta_text2(self):
        """Gets the cta_text2 of this StaticTextOtfDto.  # noqa: E501


        :return: The cta_text2 of this StaticTextOtfDto.  # noqa: E501
        :rtype: str
        """
        return self._cta_text2

    @cta_text2.setter
    def cta_text2(self, cta_text2):
        """Sets the cta_text2 of this StaticTextOtfDto.


        :param cta_text2: The cta_text2 of this StaticTextOtfDto.  # noqa: E501
        :type: str
        """

        self._cta_text2 = cta_text2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StaticTextOtfDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaticTextOtfDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
