# coding: utf-8

"""
    Oxygen CMS REST API

    CMS Private API (Used by CMS UI)   # noqa: E501

    OpenAPI spec version: 82.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StatsCompetitionSeason(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sport_id': 'float',
        'sport_name': 'str',
        'area_id': 'float',
        'area_name': 'str',
        'competition_id': 'float',
        'competition_name': 'str',
        'all_competitions': 'list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsstatsCompetitionYamlStatsCompetition]',
        'all_seasons': 'list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsstatsSeasonYamlStatsSeason]'
    }

    attribute_map = {
        'sport_id': 'sportId',
        'sport_name': 'sportName',
        'area_id': 'areaId',
        'area_name': 'areaName',
        'competition_id': 'competitionId',
        'competition_name': 'competitionName',
        'all_competitions': 'allCompetitions',
        'all_seasons': 'allSeasons'
    }

    def __init__(self, sport_id=None, sport_name=None, area_id=None, area_name=None, competition_id=None, competition_name=None, all_competitions=None, all_seasons=None):  # noqa: E501
        """StatsCompetitionSeason - a model defined in Swagger"""  # noqa: E501
        self._sport_id = None
        self._sport_name = None
        self._area_id = None
        self._area_name = None
        self._competition_id = None
        self._competition_name = None
        self._all_competitions = None
        self._all_seasons = None
        self.discriminator = None
        if sport_id is not None:
            self.sport_id = sport_id
        if sport_name is not None:
            self.sport_name = sport_name
        if area_id is not None:
            self.area_id = area_id
        if area_name is not None:
            self.area_name = area_name
        if competition_id is not None:
            self.competition_id = competition_id
        if competition_name is not None:
            self.competition_name = competition_name
        if all_competitions is not None:
            self.all_competitions = all_competitions
        if all_seasons is not None:
            self.all_seasons = all_seasons

    @property
    def sport_id(self):
        """Gets the sport_id of this StatsCompetitionSeason.  # noqa: E501


        :return: The sport_id of this StatsCompetitionSeason.  # noqa: E501
        :rtype: float
        """
        return self._sport_id

    @sport_id.setter
    def sport_id(self, sport_id):
        """Sets the sport_id of this StatsCompetitionSeason.


        :param sport_id: The sport_id of this StatsCompetitionSeason.  # noqa: E501
        :type: float
        """

        self._sport_id = sport_id

    @property
    def sport_name(self):
        """Gets the sport_name of this StatsCompetitionSeason.  # noqa: E501


        :return: The sport_name of this StatsCompetitionSeason.  # noqa: E501
        :rtype: str
        """
        return self._sport_name

    @sport_name.setter
    def sport_name(self, sport_name):
        """Sets the sport_name of this StatsCompetitionSeason.


        :param sport_name: The sport_name of this StatsCompetitionSeason.  # noqa: E501
        :type: str
        """

        self._sport_name = sport_name

    @property
    def area_id(self):
        """Gets the area_id of this StatsCompetitionSeason.  # noqa: E501


        :return: The area_id of this StatsCompetitionSeason.  # noqa: E501
        :rtype: float
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this StatsCompetitionSeason.


        :param area_id: The area_id of this StatsCompetitionSeason.  # noqa: E501
        :type: float
        """

        self._area_id = area_id

    @property
    def area_name(self):
        """Gets the area_name of this StatsCompetitionSeason.  # noqa: E501


        :return: The area_name of this StatsCompetitionSeason.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this StatsCompetitionSeason.


        :param area_name: The area_name of this StatsCompetitionSeason.  # noqa: E501
        :type: str
        """

        self._area_name = area_name

    @property
    def competition_id(self):
        """Gets the competition_id of this StatsCompetitionSeason.  # noqa: E501


        :return: The competition_id of this StatsCompetitionSeason.  # noqa: E501
        :rtype: float
        """
        return self._competition_id

    @competition_id.setter
    def competition_id(self, competition_id):
        """Sets the competition_id of this StatsCompetitionSeason.


        :param competition_id: The competition_id of this StatsCompetitionSeason.  # noqa: E501
        :type: float
        """

        self._competition_id = competition_id

    @property
    def competition_name(self):
        """Gets the competition_name of this StatsCompetitionSeason.  # noqa: E501


        :return: The competition_name of this StatsCompetitionSeason.  # noqa: E501
        :rtype: str
        """
        return self._competition_name

    @competition_name.setter
    def competition_name(self, competition_name):
        """Sets the competition_name of this StatsCompetitionSeason.


        :param competition_name: The competition_name of this StatsCompetitionSeason.  # noqa: E501
        :type: str
        """

        self._competition_name = competition_name

    @property
    def all_competitions(self):
        """Gets the all_competitions of this StatsCompetitionSeason.  # noqa: E501


        :return: The all_competitions of this StatsCompetitionSeason.  # noqa: E501
        :rtype: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsstatsCompetitionYamlStatsCompetition]
        """
        return self._all_competitions

    @all_competitions.setter
    def all_competitions(self, all_competitions):
        """Sets the all_competitions of this StatsCompetitionSeason.


        :param all_competitions: The all_competitions of this StatsCompetitionSeason.  # noqa: E501
        :type: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsstatsCompetitionYamlStatsCompetition]
        """

        self._all_competitions = all_competitions

    @property
    def all_seasons(self):
        """Gets the all_seasons of this StatsCompetitionSeason.  # noqa: E501


        :return: The all_seasons of this StatsCompetitionSeason.  # noqa: E501
        :rtype: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsstatsSeasonYamlStatsSeason]
        """
        return self._all_seasons

    @all_seasons.setter
    def all_seasons(self, all_seasons):
        """Sets the all_seasons of this StatsCompetitionSeason.


        :param all_seasons: The all_seasons of this StatsCompetitionSeason.  # noqa: E501
        :type: list[UsersbmakarIdeaProjectsoxygenCmsApisrcmainresourcesstaticprivatecomponentsstatsSeasonYamlStatsSeason]
        """

        self._all_seasons = all_seasons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatsCompetitionSeason, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsCompetitionSeason):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
