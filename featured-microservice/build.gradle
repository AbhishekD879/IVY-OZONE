plugins {

  id 'org.springframework.boot' version "2.7.1"
  id 'com.coral.tools' version "3.0-SNAPSHOT"
}

bootJar.enabled = false
bootBuildImage.enabled = false

allprojects {

  def nexusRepo = System.getenv('NEXUS_HOST') ?: 'https://nexus-vie.coral.co.uk/repository/maven-public/'
  def nexusUser = System.getenv('NEXUS_USER') ?: project.properties.nexusUser
  def nexusPass = System.getenv('NEXUS_PASS') ?: project.properties.nexusPass

  repositories {
    maven {
      credentials {
        username = nexusUser
        password = nexusPass
      }
      url nexusRepo
    }
    jcenter()
  }
}

subprojects {

  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'com.coral.tools'

  group = 'io.oxygen'

  configurations {
    all {
      exclude module: 'spring-boot-starter-tomcat'
      // exclude module: 'spring-boot-starter-logging'
    }
    compileOnly {
      extendsFrom annotationProcessor
    }
  }

  ext {
    set('springBootVersion', '2.7.1')
    set('springCloudVersion', '2021.0.3')
    set('spockBomVersion', '2.0-groovy-3.0')
  }

  dependencies {

    // Platforms
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jetty'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Spring - Kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    // implementation 'org.springframework.cloud:spring-cloud-starter-config'

    // Project Dependecies
    implementation 'com.newrelic.agent.java:newrelic-api:latest.release'

    // REST
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor'

    // Socket
    implementation 'com.corundumstudio.socketio:netty-socketio:1.7.18'
    implementation 'io.netty:netty-transport-native-epoll:4.1.78.Final:linux-x86_64'
    implementation 'io.netty:netty-transport-native-kqueue:4.1.78.Final:osx-x86_64'
    implementation 'io.socket:socket.io-client:1.0.0'

    // Utils
    implementation 'org.apache.commons:commons-lang3' // FIXME: use JDK or spring
    implementation 'com.google.guava:guava:30.0-jre' // FIXME: use spring cache ?
    implementation 'org.apache.commons:commons-collections4:4.4' // FIXME: use JDK or spring

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.vintage:junit-vintage-engine'

    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'com.github.gmazzo:okhttp-mock:1.3.2' // FIXME: remove me and rework

    testImplementation platform("org.spockframework:spock-bom:$spockBomVersion")
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.spockframework:spock-spring'
    testImplementation 'org.mockito:mockito-inline:4.6.1'

  }

  jacocoTestReport.reports.xml.enabled = true

  test {
    systemProperty 'spring.profiles.active', 'LOCAL'
    useJUnitPlatform()
  }
}

// Projects

project(':publisher-accumulation') {

  apply plugin: 'java-library'

  dependencies {
    api 'org.springframework.boot:spring-boot-actuator' // FIXME: need rework for health
    api 'org.springframework.kafka:spring-kafka'
  }
}


project(':inplay-ms') {
  apply plugin: 'org.springframework.boot'

  dependencies {

    // Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation project(':publisher-accumulation')
    jar{
      enabled=false
    }
  }

  springBoot {
    buildInfo()
  }

  bootBuildImage {
    imageName = "${project.name}"
  }
}

project(':sports-featured-ms') {
  apply plugin: 'org.springframework.boot'

  dependencies {

    // Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation project(':publisher-accumulation')

  }

  springBoot {
    buildInfo()
  }

  bootBuildImage {
    imageName = "${project.name}"
  }
  jar{
    enabled=false
  }
}
