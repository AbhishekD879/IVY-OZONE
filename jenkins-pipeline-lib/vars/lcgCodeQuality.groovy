/*
*  Checking size main.js file between https://sports.coral.co.uk/main.js and current build
*
*  Usage: add into pipeline after Test and Build stage
*
*
            stage ("Post Quality gate") {
                when { expression { return switchQualityGate}}
                parallel {
                    stage ("Check size main.js") {
                        steps {
                            script {
                                lcgCodeQuality.checkOxygenUiMainjs(service)
                            }
                        }
                    }
                }
            }
*/

def checkOxygenUiMainjs(Map parameters) {

    def relativeTargetDir = lcgCommonFunctions.getGitTargetDirectory(parameters)

    sh """
    RETURN_CODE=0
    REMOTE_FILE="https://sports.coral.co.uk/main.js"
    REMOTE_FILE_TARGET="main.js"
    LOCAL_FILES=\$(find ${relativeTargetDir}/dist -mindepth 3 -maxdepth 3  -type f -name \${REMOTE_FILE_TARGET})
    echo "Checking \${REMOTE_FILE_TARGET} ..."
    wget --user-agent='"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"' -O \${REMOTE_FILE_TARGET} \${REMOTE_FILE}
    REMOTE_FILE_SIZE=\$(stat -c%s \${REMOTE_FILE_TARGET})
    echo "Size of local file must be less or equal of remote file"
    echo "Remote file \${REMOTE_FILE}: size: \${REMOTE_FILE_SIZE}"
    for LOCAL_FILE in \${LOCAL_FILES}
        do
            LOCAL_FILE_SIZE=\$(stat -c%s \${LOCAL_FILE})
            if [ \${LOCAL_FILE_SIZE} -le \${REMOTE_FILE_SIZE} ]; then
                STATUS_LOCAL_FILE="OK"
            else
                STATUS_LOCAL_FILE="ERROR"
                RETURN_CODE=1
            fi
            echo "Local file: \${LOCAL_FILE} size: \${LOCAL_FILE_SIZE} status: \${STATUS_LOCAL_FILE}"
        done
    exit \${RETURN_CODE}
    """
}

def sonarCloudParamsToString (Map commonSonarGate) {
    def sonarParams = commonSonarGate.parametersSonarCloud.findAll { k, v -> v.length() > 0 }.collect { k, v -> "${k}=${v}" }.join(' ')
    return sonarParams
}

def sonarCloudParamsToStringWithCreds (Map commonSonarGate) {
    def sonarParams = commonSonarGate.parametersSonarCloud.findAll { k, v -> v.length() > 0 }.collect { k, v -> "${k}=${v}" }.join(' ')
    return sonarParams.plus(" -Dsonar.token=\${SONAR_TOKEN}");
}
/*
*   Sonar Cloud: getting result by pull method
*
 */
def sonarCloudPull(Map parameters, relativeTargetDir = "./") {

    if (lcgCommonFunctions.getVerbosityLevel() >= 1) {
        lcgCommonFunctions.prettyPrinter(parameters, "lcgCodeQualitySonarGate:")
    }

    def defaultSonarToken = lcgCommonFunctions.getDefaultSonarToken()
    def switchSonarCloudPipelineFailed = (parameters.switchSonarCloudPipelineFailed == null) ? true : parameters.switchSonarCloudPipelineFailed
    def serviceTimeout = parameters.serviceTimeout ?: 600
    def serviceDelay = parameters.serviceDelay ?: 10
    def sonarService = parameters.sonarService
    def sonarLogin = parameters["parametersSonarCloud"]["-Dsonar.token"] ?: "\${SONAR_TOKEN}"
    def sonarHostUrl = parameters["parametersSonarCloud"]["-Dsonar.host.url"] ?: "https://sonarcloud.io"
    def sonarHost = sonarHostUrl.split("//").last()
    def sonarHostMethod = sonarHostUrl.split(":").first()
    def sonarHostUrlAuth = "${sonarHostMethod}://${sonarLogin}@${sonarHost}"
    def sonarScannerDockerSkip = (parameters.sonarScannerDockerSkip == null) ? false : parameters.sonarScannerDockerSkip

    if (lcgCommonFunctions.getVerbosityLevel() >= 3) {
        println "lcgCodeQuality.sonarCloudPull: switchSonarCloudPipelineFailed: ${switchSonarCloudPipelineFailed}"
        println "lcgCodeQuality.sonarCloudPull: serviceTimeout: ${serviceTimeout}"
        println "lcgCodeQuality.sonarCloudPull: sonarScannerDockerSkip: ${sonarScannerDockerSkip}"
    }

    if (!sonarScannerDockerSkip) {
        stage("Statical Code Analysis") {
            try {
                containerSonarQube = lcgAgentDockerRun(parameters)
                lcgAgentDockerBootstrap(containerSonarQube)
                withSonarQubeEnv(sonarService) {
                    parameters.relativeTargetDir = relativeTargetDir
                    this.sonarScanner(parameters, containerSonarQube)
                }
            }
            finally {
                lcgAgentDockerRm(containerSonarQube)
            }
        }
    }

    stage("Sonar Quality Gate") {
        script {
            withCredentials([string(credentialsId: defaultSonarToken, variable: 'SONAR_TOKEN')])
                    {
                        sh """

TIMEOUT_SECONDS=${serviceTimeout}
DELAY_SECONDS=${serviceDelay}
PIPELINE_FAILED=${switchSonarCloudPipelineFailed}
SOURCES=${relativeTargetDir}

# File report-task.txt is generated by Sonar Scaner in sonarScanner functions or Gradle project
. \${SOURCES}/report-task.txt

RETRY=\$((TIMEOUT_SECONDS/DELAY_SECONDS))
while true; do
    set +e
    RETRY=\$((RETRY-1))
    TASK_STATUS=\$(curl -s -m 5 ${sonarHostUrlAuth}/api/ce/task?id=\${ceTaskId} | \\
python -c 'import json,sys;obj=json.load(sys.stdin);print obj["task"]["status"]')    
    if [ "\${TASK_STATUS}" = "SUCCESS" ]; then
        echo "SonarCloud Task status is \${TASK_STATUS}"
        ANALYSISID=\$(curl -s -m 5 ${sonarHostUrlAuth}/api/ce/task?id=\${ceTaskId} | \\
python -c 'import json,sys;obj=json.load(sys.stdin);print obj["task"]["analysisId"]')
        QG_STATUS=\$(curl -s -m 5 ${sonarHostUrlAuth}/api/qualitygates/project_status?analysisId=\${ANALYSISID} | \\
python -c 'import json,sys;obj=json.load(sys.stdin);print obj["projectStatus"]["status"]')

        echo "SonarCloud Quality Gate status is \${QG_STATUS}"
        case \${QG_STATUS} in
            OK)
                exit 0
                ;;
            *)
                if [ "\$PIPELINE_FAILED" = "true" ]; then
                    exit 1
                else
                    exit 0
                fi
                ;;
        esac

        break
    elif [ "\${TASK_STATUS}" = "FAILED" ];then
        echo "SonarCloud Task status is '\${TASK_STATUS}'"
        exit 1
    elif [ \${RETRY} -le 0 ]; then
        echo "SonarCloud Task timeout..."
        exit 1
    else
        echo "SonarCloud Task status is '\${TASK_STATUS}'. Waiting '\${DELAY_SECONDS}s' before next retry. '\${RETRY}' retries left"
        sleep \${DELAY_SECONDS}
    fi
done
                """
            }
        }
    }
}

/*
*   Sonar Cloud: getting result by push method
*
 */
def sonarCloudPush(Map parameters) {

    if (lcgCommonFunctions.getVerbosityLevel() >= 1) {
        lcgCommonFunctions.prettyPrinter(parameters, "lcgCodeQualitySonarGate:")
    }

    def switchSonarCloudPipelineFailed = (parameters.switchSonarCloudPipelineFailed == null) ? true : parameters.switchSonarCloudPipelineFailed
    def serviceTimeout = parameters.serviceTimeout ?: 5
    def sonarService = parameters.sonarService

    if (lcgCommonFunctions.getVerbosityLevel() >= 3) {
        println "lcgCodeQuality.sonarCloudPush: switchSonarCloudPipelineFailed: ${switchSonarCloudPipelineFailed}"
        println "lcgCodeQuality.sonarCloudPush: serviceTimeout: ${serviceTimeout}"
    }

    stage("Statical Code Analysis") {
        try {
            containerSonarQube = lcgAgentDockerRun(parameters)
            lcgAgentDockerBootstrap(containerSonarQube)
            withSonarQubeEnv(sonarService) {
                            this.sonarScanner(parameters, containerSonarQube)
            }
        }

        finally {
            lcgAgentDockerRm(containerSonarQube)
        }
    }
    stage("Sonar Quality Gate") {
        timeout(time: serviceTimeout, unit: 'SECONDS') {
            script {
                waitForQualityGate abortPipeline: switchSonarCloudPipelineFailed
            }
        }
    }
}

/*
* Sonar Scanner
*
 */
def sonarScanner(Map parameters, container) {
    def defaultSonarToken = lcgCommonFunctions.getDefaultSonarToken()
    withCredentials([string(credentialsId: defaultSonarToken, variable: 'SONAR_TOKEN')])
            {
                def sonarParams = ((parameters.parametersSonarCloud.collect { k, v -> "${k}=${v}" }.join(' ')).plus(" -Dsonar.token=\${SONAR_TOKEN}"))
                def fullCommand = lcgCommonFunctions.commandSudoShInDirDockerStyle(parameters, "sonar-scanner ${sonarParams}")
                lcgAgentDockerExec(container, fullCommand)
            }
}
