#!/usr/bin/env groovy

@Library(value='jenkins-pipeline-lib@master', changelog=false)

def agentLabel = "crlat-macos-slave"
def service = lcgCommonFunctions.getConstantsParameters("services.serviceVoltronBmaUiTest")
def relativeTargetDir = lcgCommonFunctions.getGitTargetDirectory(service)
def repositories = [service]
def nexusCredentialsId = service.nexusCredentialsId
def testrailCredentialsId = service.testrailCredentialsId

def envTestPath = params.env_test_path ?: "./tests"
def runOn = params.run_on ?: "mobile and desktop"
def mark = params.mark ?: "tst2"
def customMarks = params.custom_marks ?: ""
def pytestTimeOut = params.pytest_timeout ?: "650"
def targetHost = params.target_host ?: "bet-tst1.coral.co.uk"
def backEnd = params.back_end ?: "tst2"
def rerunTest = (params.rerun_test != null) ? ( params.rerun_test ? "True" : "False" ) : "True"
def testrailId = params.testrailId ?: ""
def locationName = params.locationName ?: "Mac_Mini_GRID"
def emailRecipients = params.email_recipients.trim() ?: ""
def emailBody = ""
def branchName =  params.ref_voltron ?: ""

// Switch clean up workspace
def switchPostCleanUpWs = (params.clean_ws != null) ? params.clean_ws : true

def transformIntoStep(inputString, Map arguments = [:]) {

        def relativeTargetDir = arguments.relativeTargetDir ?: ""
        def customMarks = arguments.customMarks ?: ""
        def targetHost = arguments.targetHost ?: ""
        def backEnd = arguments.backEnd ?: ""
        def deviceName = arguments.deviceName ?: ""

sh """
cat <<EOF > test.sh
#!/bin/bash
cd ${relativeTargetDir}
source /etc/profile
source /Users/jenkins/PycharmProjects/voltron/venv/bin/activate
source ../env.list
pytest --hostname=${targetHost} --environment=${backEnd} --device_name=${deviceName} ${inputString}
EOF
"""
    catchError {
        sh """
        export TESTRAIL_USER=${TESTRAIL_USER}
        export TESTRAIL_PASSWD=${TESTRAIL_PASSWD}
        export TESTRAIL_ID=${testrailId}

        MAX_RETRY=2
        RETRY=1
        CUSTOM_EXIT_CODE=86
        EXIT_CODE=86

        while [ \${EXIT_CODE} -eq \${CUSTOM_EXIT_CODE} ] && [ \${RETRY} -le \${MAX_RETRY} ]
        do
        bash test.sh && EXIT_CODE="\$?" || EXIT_CODE="\$?"
            RETRY=\$((RETRY+1))
        done

        if [ \$EXIT_CODE -ne 0 ]; then exit 1; fi
        """
    }
    echo currentBuild.result
}

pipeline {
    agent {
        node {
            label agentLabel
        }
    }
    environment {
        def BUILDVERSION = sh(script: "echo `date`", returnStdout: true)
    }
    options {
        skipDefaultCheckout true
        timestamps()
    }
    stages {
        stage("Sanity workspace") {
            steps {
                deleteDir()
            }
        }
        stage('Getting SCM sources') {
            steps {
                script {
                    lcgScmGitParallel(repositories, false)
                }
            }
        }
        stage("Start selenium-server-standalone") {
           steps {
                script {
                    sh """
                    sudo pkill -f selenium 2>/dev/null || true
                    sudo pkill -f Safari 2>/dev/null || true
                    sleep 5
                    cd ${relativeTargetDir}
                    open /Applications/selenium.app
                    """
                }
            }
        }
        stage("install NPM packages") {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: nexusCredentialsId,
                            usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASSWD')]) {
                        sh """
cat <<EOF > env.list
export TEST_PATH=${envTestPath}
export MARK="${mark}"
export CUSTOM_MARKS="${customMarks}"
export RUN_ON="${runOn}"
export PYTEST_TIMEOUT=${pytestTimeOut}
export RERUN_TEST=${rerunTest}
export OX_HOSTNAME=${targetHost}
export LOCATION_NAME=${locationName}
export GIT_BRANCH=${branchName}
export JOB_NAME=${JOB_NAME}
export TESTRAIL_ID=${testrailId}

EOF
                  """
                        sh """
                        cd ${relativeTargetDir}
                        source /etc/profile
                        source /Users/jenkins/PycharmProjects/voltron/venv/bin/activate
                        export PIP_EXTRA_INDEX_URL=https://\${NEXUS_USER}:\${NEXUS_PASSWD}@npm-repo.coral.co.uk/repository/crlat_pypi/simple
                        pip install -r requirements.txt
                        """
                    }
                }
            }
        }
        stage("Generate Discovery Test File") {
            steps {
                script {
                        sh """
                        cd ${relativeTargetDir}
                        source /etc/profile
                        source /Users/jenkins/PycharmProjects/voltron/venv/bin/activate
                        source ../env.list
                        python jenkins_test_discovery.py
                        """
                }
            }
        }
        stage("Generate ID for TESTRAIL") {
            when { expression { return testrailId == "" } }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: testrailCredentialsId,
                            usernameVariable: 'TESTRAIL_USER', passwordVariable: 'TESTRAIL_PASSWD')]) {
                        sh """
                        cd ${relativeTargetDir}
                        source /etc/profile
                        source /Users/jenkins/PycharmProjects/voltron/venv/bin/activate
                        export TESTRAIL_USER=\${TESTRAIL_USER}
                        export TESTRAIL_PASSWD=\${TESTRAIL_PASSWD}
                        source ../env.list
                        python scripts/testrail_integration/create_run.py
                        """
                        testrailId = readFile("${relativeTargetDir}/test_run_id.txt")
                    }
                }
            }
        }
        stage("Run Mobile") {
            steps {
                catchError {
                    script {
                        withCredentials([usernamePassword(credentialsId: testrailCredentialsId,
                                usernameVariable: 'TESTRAIL_USER', passwordVariable: 'TESTRAIL_PASSWD')]) {

                            def mobileTestsFile = readFile("sources/discovered-tests/mobile.txt")
                            def mobileTests = mobileTestsFile.split()
                            def deviceName = params.deviceName ?: '"iPhone X"'
                            def stepsForSeparateTests = mobileTests.collectEntries {
                                ["${it}": transformIntoStep(it,
                                        [
                                        relativeTargetDir  : relativeTargetDir,
                                        customMarks   : customMarks,
                                        targetHost    : targetHost,
                                        backEnd       : backEnd,
                                        deviceName    : deviceName
                                        ]
                                )
                            ]
                            }
                            stepsForSeparateTests
                        }
                    }
                    echo currentBuild.result
                }
            }
        }
        stage("Run Desktop") {
            steps {
                catchError {
                    script {
                        withCredentials([usernamePassword(credentialsId: testrailCredentialsId,
                                usernameVariable: 'TESTRAIL_USER', passwordVariable: 'TESTRAIL_PASSWD')]) {

                            def desktopTestsFile = readFile("sources/discovered-tests/desktop.txt")
                            def desktopTests = desktopTestsFile.split()
                            def deviceName = params.deviceName ?: '"Desktop Safari"'
                            def stepsForSeparateTests = desktopTests.collectEntries {
                                ["${it}": transformIntoStep(it,
                                        [
                                                relativeTargetDir  : relativeTargetDir,
                                                customMarks   : customMarks,
                                                targetHost    : targetHost,
                                                backEnd       : backEnd,
                                                deviceName    : deviceName
                                        ]
                                )
                                ]
                            }
                            stepsForSeparateTests
                        }
                    }
                    echo currentBuild.result
                }
            }
        }
        stage("Remove untested tests") {
            steps {
                catchError {
                    script {
                        withCredentials([usernamePassword(credentialsId: testrailCredentialsId,
                                usernameVariable: 'TESTRAIL_USER', passwordVariable: 'TESTRAIL_PASSWD')]) {

                        sh """
                        cd ${relativeTargetDir}
                        source /Users/jenkins/PycharmProjects/voltron/venv/bin/activate
                        source ../env.list
                        export TESTRAIL_USER=\${TESTRAIL_USER}
                        export TESTRAIL_PASSWD=\${TESTRAIL_PASSWD}
                        python scripts/testrail_integration/remove_untested_tests.py
                        """
                        }
                    }
                    echo currentBuild.result
                }
            }
        }
        stage("Close old runs") {
            steps {
                catchError {
                    script {
                        withCredentials([usernamePassword(credentialsId: testrailCredentialsId,
                                usernameVariable: 'TESTRAIL_USER', passwordVariable: 'TESTRAIL_PASSWD')]) {

                            sh """
                        cd ${relativeTargetDir}
                        source /Users/jenkins/PycharmProjects/voltron/venv/bin/activate
                        source ../env.list
                        export TESTRAIL_USER=\${TESTRAIL_USER}
                        export TESTRAIL_PASSWD=\${TESTRAIL_PASSWD}
                        export TESTRAIL_ID=${testrailId}
                        python scripts/testrail_integration/close_old_runs.py
                        """
                        }
                    }
                }
                echo currentBuild.result
            }
        }
        stage("Generate data for email newsletter") {
            steps {
                catchError {
                    script {
                        withCredentials([usernamePassword(credentialsId: testrailCredentialsId,
                                usernameVariable: 'TESTRAIL_USER', passwordVariable: 'TESTRAIL_PASSWD')]) {
                        sh """
                        cd ${relativeTargetDir}
                        source /Users/jenkins/PycharmProjects/voltron/venv/bin/activate
                        source ../env.list
                        export TESTRAIL_USER=\${TESTRAIL_USER}
                        export TESTRAIL_PASSWD=\${TESTRAIL_PASSWD}
                        python scripts/testrail_integration/create_data_for_email.py
                        """
                        }
                    }
                        echo currentBuild.result
                }
            }
        }
   }
   post {
        always {
            script {
                if (fileExists('sources/result.txt')) {
                    emailBody = readFile("sources/result.txt")
                } else {
                    emailBody = "File result.txt doesn't exists"
                }
            }
            emailext body: "${emailBody}\n More info at: ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                    subject: "Run #${env.BUILD_NUMBER} @ ${targetHost} ${env.BUILDVERSION}",
                    to: "${emailRecipients}"
            sh """
            #!/usr/bin/env bash
            sudo pkill -f selenium 2>/dev/null || true
            """
        }
        cleanup {
            script {
                if (switchPostCleanUpWs) {
                    cleanWs()
                }
            }
        }
   }
}
