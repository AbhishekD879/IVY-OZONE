spring.profiles.active=LOCAL
logging.level.root=INFO

http.proxyHost=
http.proxyPort=

spring.application.name=liveserve-consumer
spring.cloud.discovery.enabled=false
spring.config.discovery.enabled=true

# un-set by default. used for redirect.
management.endpoints.web.base-path=/actuator
management.endpoints.web.path-mapping.health=/health
management.endpoints.web.path-mapping.info=/info
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

liveServer.endpoint = https://stg-push-lcm.ladbrokes.com/push
liveServer.connection.timeout = 30
liveServer.read.timeout = 100
# Time to live of the event subscription, seconds
# 3 hours
liveServer.subscription.expire = 10800
liveServer.logging.level=BASIC
# LiveServer has 100kb per body limit - in worst case it's 3225 subjects
# LiveServer reported to have upper limit of subscriptions in one request = 1024
# Better to use smaller values, but not to small as it increases number of threads used on liveupdates
liveServer.subscription.limitPerClient = 750

events.resolved.cache.size = 50000
#6hours
events.resolved.cache.ttl.seconds = 21600

siteServer.api.version = 2.65
siteServer.logging.level = BASIC
siteServer.connection.timeout = 2
siteServer.read.timeout = 2
siteServer.retries.number = 3

# qa.messages configuration can cause Out of memory
# qa.messages.enabled # in profiles
qa.messages.max.channels.count=1000
qa.messages.max.count.per.channel=10
qa.messages.expire.after.write.sec=600

# ebable/disable subscribe and unsubscribe through REST endpoint
# qa.subscription.enabled=true # in profiles

# 60 sec waiting on monitor when there are no subscriptions.
# This parameter is not important because if new subscription is added monitor will be notified.
wait.subscription.interval=60000

# sleep time after detecting error
sleep.after.error.time=1000

# configuration for RetriableCall
# 0 = 1 request.
# 1 = request and 1 additional retry
retries.count=6

enable.unsubscribe.scheduler=true

unsubscribe.initialDelay.millis=60000
unsubscribe.fixedDelay.millis=10000

kafka.partition.default=6
kafka.replica.factor=2
kafka.listeners.number=1

masterlock.lease-duration=15
masterlock.heartbeat-period=3
masterlock.aws.region=eu-west-2
masterlock.aws.dynamo.url=https://dynamodb.eu-west-2.amazonaws.com

spring.kafka.bootstrap-servers=localhost:9092

distributed.prefix=${spring.profiles.active}
topic.subscription=${distributed.prefix}__liveserve-subscription-topic
topic.live-updates=${distributed.prefix}__liveserve-updates-topic
topic.scoreboards=${distributed.prefix}__liveserve-scoreboards-topic
topic.incidents=${distributed.prefix}__liveserve-incidents-topic
topic.internal.df.scoreboards=${distributed.prefix}__liveserve-internal-df-scoreboards-topic
internal.df.kafka.groupId=${distributed.prefix}-internal-df-scoreboards
internal.df.kafka.listenersConcurrency=10
internal.df.kafka.partitions=${kafka.partition.default}

server.port=9090
server.forward-headers-strategy=framework

siteserver.priceboost.simplefilter.value=isTrue
siteserver.priceboost.simplefilter.key=outcome.hasPriceStream
siteserver.priceboost.enabled=true

# DF kafka configs
ssl.certificates.resource=file:/opt/liveserve-microservice/ssl

df.kafka.bootstrap-servers=df-app-kafka-test.ladbrokescoral.com:9092
df.kafka.admin.properties.bootstrap.servers=${df.kafka.bootstrap-servers}
df.kafka.consumer.bootstrap-servers=${df.kafka.bootstrap-servers}
df.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
df.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
df.kafka.consumer.auto-offset-reset=latest
df.kafka.consumer.auto-commit-interval=1s

df.kafka.consumer.ssl.key-store-location=classpath:ssl/dev/oxygen.keystore.jks
df.kafka.consumer.ssl.trust-store-location=classpath:ssl/dev/oxygen.keystore.jks
df.kafka.consumer.ssl.key-store-password=changeit
df.kafka.consumer.ssl.key-password=changeit
df.kafka.consumer.ssl.trust-store-password=changeit

df.kafka.properties.security.protocol=SSL
df.kafka.consumer.ssl.trust-store-type=JKS
df.kafka.consumer.ssl.key-store-type=JKS
df.kafka.consumer.security.protocol=SSL

df.kafka.listenersConcurrency=10

scoreboard.topic.eventKey=cd-eventKey
df.scoreboard.topic.name=test.scoreboards.1
df.kafka.consumer.group-id=LIVESERV-CONSUMER-SCRBRD-${spring.profiles.active}
df.incidents.topic.name=stage.incidents.1
incident.sport.category=sdm-sport
incident.sport.codes=601,201,202,203,204,205,206,207,402,403,208,220,211,213,219,210,214,301,302,401,500,502,501,215,216,217,221,218
spring.config.use-legacy-processing=true
