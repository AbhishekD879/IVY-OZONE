#$ gradle bootBuildImage && docker-compose up

version: '3.8'

services:

  # zookeeper:
  #   container_name: cms-api_zoo
  #   image: wurstmeister/zookeeper
  #   ports:
  #     - 2181:2181

  # kafka:
  #   container_name: cms-api_kafka
  #   image: wurstmeister/kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 9092:9092
  #   environment:
  #     KAFKA_ADVERTISED_HOST_NAME: kafka
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LOG4J_ROOT_LOGLEVEL: warn
  #   # volumes:
  #     # - /var/run/docker.sock:/var/run/docker.sock

  mongo:
    container_name: cms-api_mongo
    image: mongo
    restart: always
    ports:
      - 27017:27017
    # environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: example

  # mongo-express:
  #   container_name: cms-api_mongoui
  #   image: mongo-express
  #   restart: always
  #   depends_on:
  #     - mongo
  #   ports:
  #     - 8081:8081
  #   # environment:
  #     # ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     # ME_CONFIG_MONGODB_ADMINPASSWORD: example

  cms-api:
    # build: .
    container_name: cms-api
    image: oxygen-cms-api:latest
    depends_on:
      # - kafka
      - mongo
      # - mongoui
    ports:
      - 8080:8080
    environment:
      spring.profiles.active: LOCAL
      spring.output.ansi.enabled: ALWAYS
      spring.redis.host: redis
      spring.data.mongodb.uri: 'mongodb://mongo:27017/bma'
      spring.kafka.bootstrap-servers: kafka
      logging.level.root: info
      logging.level.org.apache.kafka: error
      # AWS_ACCESS_KEY_ID:
      # AWS_SECRET_ACCESS_KEY:
      # AWS_S3_ACCESS_KEY_ID:
      # AWS_S3_SECRET_ACCESS_KEY:
